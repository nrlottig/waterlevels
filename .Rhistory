library(randomForest)
library(caret)
library(e1071)
require(VSURF)
library(forestFloor)
(rf.data = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=rep(min(table(Y)),nlevels(Y)),strata=Y))
pred = predict(rf.data)
(conf.out = confusionMatrix(pred,Y))
med.vsurf = VSURF(x = X,y = Y,parallel = TRUE,ncores = 7,sampsize=rep(min(table(Y)),nlevels(Y)),strata=Y,clusterType = "FORK",keep.inbag=TRUE)
names(X[med.vsurf$varselect.interp])
names(X[med.vsurf$varselect.pred])
(rf.data2 = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=rep(min(table(Y)),nlevels(Y)),strata=Y))
pred = predict(rf.data2)
(conf.out = confusionMatrix(pred,Y))
(imp.out = importance(rf.data2,type=1,scale=FALSE))
names(X)
# med.vsurf.dtw13.dmv13 = med.vsurf #Save output for future use 4.5 run time.
X = X[,med.vsurf$varselect.pred]
(rf.data2 = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=rep(min(table(Y)),nlevels(Y)),strata=Y))
pred = predict(rf.data2)
(conf.out = confusionMatrix(pred,Y))
(imp.out = importance(rf.data2,type=1,scale=FALSE))
options(device="quartz")
dev.new(width=6,height=4)
par(oma=c(1.2,.8,.2,.2),mar=c(0,0,0,0),family="Times",ps=10)
dotplot(imp.out[order(imp.out[,1],decreasing = FALSE),1]*100,main="",xlab="Mean Decrease Accuracy (%)")
names(X)
plot.names = names(X)#c("Evergreen Forest (HU8,%)","Precipitation Cluster","Mean Annual Precip (30yr avg)")
dev.new(width=8,height=4)
par(mfrow=c(1,2),oma=c(0,0,0,0),mar=c(3,3,.2,.2),family="Times",ps=10,cex.axis=1,cex.lab=2,cex.main=1.5)
for(i in 1:ncol(X)){
out1 = partialPlot(x = rf.data2,pred.data = X,x.var = names(X)[i],which.class = 1,plot=FALSE)
out2 = partialPlot(x = rf.data2,pred.data = X,x.var = names(X)[i],which.class = 2,plot=FALSE)
# out3 = partialPlot(x = rf.data2,pred.data = X,x.var = names(X)[i],which.class = 3,plot=FALSE)
yrange = range(out1$y,out2$y,out3$y)
plot(out1,col=1,type="l",ylim=yrange,xlab="",ylab="",lwd=2)
mtext(side=1,plot.names[i],line=1.8)
if(i==1 | i==5) mtext(side=2,"Impact on Class Probability",line=1.8)
lines(out2,col=2,type="l",lwd=2)
# lines(out3,col=3,type="l",lwd=2)
}
map.regions = c('wisconsin')
dev.new(width=5,height=5)
map('state',region=map.regions,col=grey(.98),fill=TRUE,resolution = 0,mar=c(0,0,0,0),border=grey(.5),lty=5, main="Water Level Clusters")
library(maps)
library(maptools)
library(scales)
map.regions = c('wisconsin')
dev.new(width=5,height=5)
map('state',region=map.regions,col=grey(.98),fill=TRUE,resolution = 0,mar=c(0,0,0,0),border=grey(.5),lty=5, main="Water Level Clusters")
points(dataset$Longitude,dataset$Latitude,col=alpha(as.numeric(dataset$DTW1_2_ClusterID),.7),pch=16)
legend("topright",legend=c(1:3),pch=16,col=c(1:3),title = "Cluster ID",bty="n")
map.regions = c('wisconsin')
dev.new(width=5,height=5)
map('state',region=map.regions,col=grey(.98),fill=TRUE,resolution = 0,mar=c(0,0,0,0),border=grey(.5),lty=5, main="Water Level Clusters")
points(dataset$Longitude,dataset$Latitude,col=alpha(as.numeric(dataset$DTW1_2_ClusterID),.7),pch=16)
legend("topright",legend=c(1:2),pch=16,col=c(1:2),title = "Cluster ID",bty="n")
# 02072018  Add Noah's code for plotting
# 02072018  Switch the names of x and y labels in my code
# 02112018  Add the code for mapping coefficient of variation and slope
# 02142018  Change the name of the IDs used for this model from WiscID to BHMID to avoid confusion
# 02142018  Change the method for calculation of coefficient of variance. Now CV = std(resid)/mean
# 02202018  Do not drop lake 200900 entirely. Only get rid of the data that are "no water"
# Note the 02202018 version does not contain all the code. Its purpose is to generate a lake information file
# 03122018 Developed from 02202018 version. Add the code to generate monthly lake level data
#          and precipitation data
##################################################
rm(list=ls())
dat <- read_csv("BayHModels/BHM_input_20180310.csv")
FinalSeepageLakes <- read_csv("BayHModels/FinalSeepageLakes.csv")
dat = dat %>% filter(WiscID %in% FinalSeepageLakes$WiscID)
library(tidyverse)
dat <- read_csv("BayHModels/BHM_input_20180310.csv")
FinalSeepageLakes <- read_csv("BayHModels/FinalSeepageLakes.csv")
dat = dat %>% filter(WiscID %in% FinalSeepageLakes$WiscID)
library(tidyverse)
library(R2jags)
library(lattice)  # plot
library(lubridate)
allLakeList = unique(dat$WiscID)
dat$BHMID = NA
for (i in 1:length(allLakeList)) {
dat$BHMID[dat$WiscID %in% allLakeList[i]] = i
}
#standardize the lowest observed water level to 1000mm (1m)
lakes = unique(dat$BHMID)
for(i in 1:length(lakes)){
temp = dat$Value[dat$BHMID %in% lakes[i]]
std.level = temp-min(temp)+1000
dat$Value[dat$BHMID %in% lakes[i]] = std.level
}
#standardize the lowest observed precipCMDV to 0
for(i in 1:length(lakes)){
temp = dat$precipCMDV[dat$BHMID %in% lakes[i]]
std.level = temp-min(temp)
dat$precipCMDV[dat$BHMID %in% lakes[i]] = std.level
}
summary(dat)
# The Model
sink("model.txt")
cat("
model {
# Likelihood:
# Level-1 of the model
for (i in 1:n){
y[i] ~ dnorm(mu[i], tau)
mu[i] <- alpha[group[i]] + beta[group[i]] * precip[i]
}
# Level-2 of the model
for(j in 1:J){
alpha[j] <- BB[j,1]
beta[j] <- BB[j,2]
BB[j,1:K] ~ dmnorm(BB.hat[j,], Tau.B[,]) # bivriate normal
BB.hat[j,1] <- mu.alpha
BB.hat[j,2] <- mu.beta
}
# Priors and derived quantities
sigma ~ dunif(0, 100)
tau <- pow(sigma,-2) # precision
sigma2 <- pow(sigma,2)
mu.alpha ~ dnorm(0, 0.0001)
mu.beta ~ dnorm(0, 0.0001)
# Convert covariance matrix to precision for use in bivariate normal above
Tau.B[1:K,1:K] <- inverse(Sigma.B[,])
# variance among intercepts
Sigma.B[1,1] <- pow(sigma.a, 2)
sigma.a ~ dunif (0, 100)
# Variance among slopes
Sigma.B[2,2] <- pow(sigma.b, 2)
sigma.b ~ dunif (0, 100)
# Covariance between alpha's and beta's
Sigma.B[1,2] <- rho * sigma.a * sigma.b
Sigma.B[2,1] <- Sigma.B[1,2]
# Uniform prior on correlation
rho ~ dunif (-1, 1)
} # end model
",fill = TRUE)
sink()
# Set up the parameters before run the model
# Number of parameters
K = 2
# Number of lakes
J = length(unique(dat$BHMID))
# Load data raw water level data
dat = as.data.frame(dat)
data = list(y = dat$Value, group = as.numeric(dat$BHMID), n = dim(dat)[1], J = J,
precip = dat$precipCMDV, K = K)
# Initial values
inits = function (){
list(mu.alpha = rnorm(1), mu.beta=rnorm(1), sigma=runif(1),
BB=matrix(rnorm(J*K),nrow=J,ncol=K), sigma.a=runif(1), sigma.b=runif(1), rho=runif(1) )
}
# Parameters monitored
# mu.alpha: global alpha
# mu.beta: global beta
# BB: local alphas and betas
# sigma: local error term
# sigma.a: variances of alpha
# sigma.b: variances of beta
# rho: covarainces of alpha and beta
#
parameters = c("mu.alpha","mu.beta","BB","sigma", "sigma.a", "sigma.b","rho")
# MCMC settings
ni <- 50000
nt <- 20
nb <- 20000
nc <- 3
# Run the model
out = jags.parallel(data = data,
inits = inits,
parameters.to.save = parameters,
model.file = "model.txt",
n.chains = 3,
n.thin = 20,
n.iter = 50000,
n.burnin = 20000,
n.cluster = 3)
save.image("~/Documents/GitHub/waterlevels/waterlevels.RData")
reg.coef = out$BUGSoutput$mean$BB
lakes = unique(dat$BHMID)
dat$Date = as.character(dat$Date)
dat$Date = paste(dat$Date,"/15",sep="")
dat$Date = as_date(x = dat$Date)
pdf("myOut.pdf",width=8,height=10.5,onefile = TRUE)
par(mfrow=c(3,2))
for (i in 1:length(lakes)){
#pull out data for each lake and generate predicted water levels
dat.t = dat %>% filter(BHMID==i) %>% arrange(Date)
dat.t = dat.t %>% mutate(predValue=reg.coef[i,1] + dat.t$precipCMDV*reg.coef[i,2])
#plot relationship between precip and water level
plot(x = dat.t$precipCMDV, y = dat.t$Value,xlab="PrecipCMDV (mm)",
ylab="Water Level (mm)",pch=16,ylim=range(dat$Value),
xlim=range(dat$precipCMDV))
tryCatch({
abline(lm(dat.t$Value~dat.t$precipCMDV),col="lightblue",lwd=2)
},error=function(e){})
abline(a = reg.coef[i,1][[1]],b=reg.coef[i,2][[1]],col="red",lwd=2)
abline(a = out$BUGSoutput$mean$mu.alpha,b=out$BUGSoutput$mean$mu.beta,col="green",lwd=2)
mtext(side=3,line=1,paste("BHM ID: ",i))
#plot predicted and observed water levels
y.range = range(c(dat.t$Value,dat.t$predValue))
plot(dat.t$Date,dat.t$Value,type="b",pch=16,xlab="Date",ylab="Water Level (mm)",ylim=c(1000,max(2000,y.range[2])))
points(dat.t$Date,dat.t$predValue,type="b",pch=16,col="blue")
}
dev.off()
head(dat)
dat.t
mtext(side=3,line=1,paste("WIiD: ",dat.t$SiteName[1]))
pdf("myOut.pdf",width=8,height=10.5,onefile = TRUE)
par(mfrow=c(3,2))
for (i in 1:length(lakes)){
#pull out data for each lake and generate predicted water levels
dat.t = dat %>% filter(BHMID==i) %>% arrange(Date)
dat.t = dat.t %>% mutate(predValue=reg.coef[i,1] + dat.t$precipCMDV*reg.coef[i,2])
#plot relationship between precip and water level
plot(x = dat.t$precipCMDV, y = dat.t$Value,xlab="PrecipCMDV (mm)",
ylab="Water Level (mm)",pch=16,ylim=range(dat$Value),
xlim=range(dat$precipCMDV))
tryCatch({
abline(lm(dat.t$Value~dat.t$precipCMDV),col="lightblue",lwd=2)
},error=function(e){})
abline(a = reg.coef[i,1][[1]],b=reg.coef[i,2][[1]],col="red",lwd=2)
abline(a = out$BUGSoutput$mean$mu.alpha,b=out$BUGSoutput$mean$mu.beta,col="green",lwd=2)
mtext(side=3,line=1,paste("WIiD: ",dat.t$SiteName[1]))
#plot predicted and observed water levels
y.range = range(c(dat.t$Value,dat.t$predValue))
plot(dat.t$Date,dat.t$Value,type="b",pch=16,xlab="Date",ylab="Water Level (mm)",ylim=c(1000,max(2000,y.range[2])))
points(dat.t$Date,dat.t$predValue,type="b",pch=16,col="blue")
}
dev.off()
pdf("myOut.pdf",width=8,height=10.5,onefile = TRUE)
par(mfrow=c(3,2))
for (i in 1:length(lakes)){
#pull out data for each lake and generate predicted water levels
dat.t = dat %>% filter(BHMID==i) %>% arrange(Date)
dat.t = dat.t %>% mutate(predValue=reg.coef[i,1] + dat.t$precipCMDV*reg.coef[i,2])
#plot relationship between precip and water level
plot(x = dat.t$precipCMDV, y = dat.t$Value,xlab="PrecipCMDV (mm)",
ylab="Water Level (mm)",pch=16,ylim=range(dat$Value),
xlim=range(dat$precipCMDV))
tryCatch({
abline(lm(dat.t$Value~dat.t$precipCMDV),col="lightblue",lwd=2)
},error=function(e){})
abline(a = reg.coef[i,1][[1]],b=reg.coef[i,2][[1]],col="red",lwd=2)
abline(a = out$BUGSoutput$mean$mu.alpha,b=out$BUGSoutput$mean$mu.beta,col="green",lwd=2)
mtext(side=3,line=1,paste(dat.t$SiteName[1], " WiscID-",dat.t$WiscID[1]))
#plot predicted and observed water levels
y.range = range(c(dat.t$Value,dat.t$predValue))
plot(dat.t$Date,dat.t$Value,type="b",pch=16,xlab="Date",ylab="Water Level (mm)",ylim=c(1000,max(2000,y.range[2])))
points(dat.t$Date,dat.t$predValue,type="b",pch=16,col="blue")
}
dev.off()
pdf("myOut.pdf",width=8,height=10.5,onefile = TRUE)
par(mfrow=c(3,2))
for (i in 1:length(lakes)){
#pull out data for each lake and generate predicted water levels
dat.t = dat %>% filter(BHMID==i) %>% arrange(Date)
dat.t = dat.t %>% mutate(predValue=reg.coef[i,1] + dat.t$precipCMDV*reg.coef[i,2])
#plot relationship between precip and water level
plot(x = dat.t$precipCMDV, y = dat.t$Value,xlab="PrecipCMDV (mm)",
ylab="Water Level (mm)",pch=16,ylim=range(dat$Value),
xlim=range(dat$precipCMDV))
tryCatch({
abline(lm(dat.t$Value~dat.t$precipCMDV),col="lightblue",lwd=2)
},error=function(e){})
abline(a = reg.coef[i,1][[1]],b=reg.coef[i,2][[1]],col="red",lwd=2)
abline(a = out$BUGSoutput$mean$mu.alpha,b=out$BUGSoutput$mean$mu.beta,col="green",lwd=2)
mtext(side=3,line=1,paste(dat.t$SiteName[1], " WiscID:",dat.t$WiscID[1], " WIBIC:",dat.t$WBIC[1],sep=""))
#plot predicted and observed water levels
y.range = range(c(dat.t$Value,dat.t$predValue))
plot(dat.t$Date,dat.t$Value,type="b",pch=16,xlab="Date",ylab="Water Level (mm)",ylim=c(1000,max(2000,y.range[2])))
points(dat.t$Date,dat.t$predValue,type="b",pch=16,col="blue")
}
dev.off()
pdf("myOut.pdf",width=8,height=10.5,onefile = TRUE)
par(mfrow=c(3,2))
for (i in 1:length(lakes)){
#pull out data for each lake and generate predicted water levels
dat.t = dat %>% filter(BHMID==i) %>% arrange(Date)
dat.t = dat.t %>% mutate(predValue=reg.coef[i,1] + dat.t$precipCMDV*reg.coef[i,2])
#plot relationship between precip and water level
plot(x = dat.t$precipCMDV, y = dat.t$Value,xlab="PrecipCMDV (mm)",
ylab="Water Level (mm)",pch=16,ylim=range(dat$Value),
xlim=range(dat$precipCMDV))
tryCatch({
abline(lm(dat.t$Value~dat.t$precipCMDV),col="lightblue",lwd=2)
},error=function(e){})
abline(a = reg.coef[i,1][[1]],b=reg.coef[i,2][[1]],col="red",lwd=2)
abline(a = out$BUGSoutput$mean$mu.alpha,b=out$BUGSoutput$mean$mu.beta,col="green",lwd=2)
mtext(side=3,line=1,paste(dat.t$SiteName[1], " WiscID:",dat.t$WiscID[1], " WIBIC:",dat.t$WBIC[1],sep=""))
legend('topleft',legend=c("linear","Bayes","Global"),lty=1,col=c("lightblue","red","green"))
#plot predicted and observed water levels
y.range = range(c(dat.t$Value,dat.t$predValue))
plot(dat.t$Date,dat.t$Value,type="b",pch=16,xlab="Date",ylab="Water Level (mm)",ylim=c(1000,max(2000,y.range[2])))
points(dat.t$Date,dat.t$predValue,type="b",pch=16,col="blue")
}
dev.off()
pdf("myOut.pdf",width=8,height=10.5,onefile = TRUE)
par(mfrow=c(3,2))
for (i in 1:length(lakes)){
#pull out data for each lake and generate predicted water levels
dat.t = dat %>% filter(BHMID==i) %>% arrange(Date)
dat.t = dat.t %>% mutate(predValue=reg.coef[i,1] + dat.t$precipCMDV*reg.coef[i,2])
#plot relationship between precip and water level
plot(x = dat.t$precipCMDV, y = dat.t$Value,xlab="PrecipCMDV (mm)",
ylab="Water Level (mm)",pch=16,ylim=range(dat$Value),
xlim=range(dat$precipCMDV))
tryCatch({
abline(lm(dat.t$Value~dat.t$precipCMDV),col="lightblue",lwd=2)
},error=function(e){})
abline(a = reg.coef[i,1][[1]],b=reg.coef[i,2][[1]],col="red",lwd=2)
abline(a = out$BUGSoutput$mean$mu.alpha,b=out$BUGSoutput$mean$mu.beta,col="green",lwd=2)
mtext(side=3,line=1,paste(dat.t$SiteName[1], " WiscID:",dat.t$WiscID[1], " WIBIC:",dat.t$WBIC[1],sep=""),cex=.8)
legend('topleft',legend=c("linear","bayesH","global"),lty=1,col=c("lightblue","red","green"))
#plot predicted and observed water levels
y.range = range(c(dat.t$Value,dat.t$predValue))
plot(dat.t$Date,dat.t$Value,type="b",pch=16,xlab="Date",ylab="Water Level (mm)",ylim=c(1000,max(2000,y.range[2])))
points(dat.t$Date,dat.t$predValue,type="b",pch=16,col="blue")
}
dev.off()
pdf("myOut.pdf",width=8,height=10.5,onefile = TRUE)
par(mfrow=c(3,2))
for (i in 1:length(lakes)){
#pull out data for each lake and generate predicted water levels
dat.t = dat %>% filter(BHMID==i) %>% arrange(Date)
dat.t = dat.t %>% mutate(predValue=reg.coef[i,1] + dat.t$precipCMDV*reg.coef[i,2])
#plot relationship between precip and water level
plot(x = dat.t$precipCMDV, y = dat.t$Value,xlab="PrecipCMDV (mm)",
ylab="Water Level (mm)",pch=16,ylim=range(dat$Value),
xlim=range(dat$precipCMDV))
tryCatch({
abline(lm(dat.t$Value~dat.t$precipCMDV),col="lightblue",lwd=2)
},error=function(e){})
abline(a = reg.coef[i,1][[1]],b=reg.coef[i,2][[1]],col="red",lwd=2)
abline(a = out$BUGSoutput$mean$mu.alpha,b=out$BUGSoutput$mean$mu.beta,col="green",lwd=2)
mtext(side=3,line=1,paste(dat.t$SiteName[1], " WiscID:",dat.t$WiscID[1], " WIBIC:",dat.t$WBIC[1],sep=""),cex=.8)
legend('topleft',legend=c("linear","bayesH","global"),lty=1,col=c("lightblue","red","green"))
#plot predicted and observed water levels
y.range = range(c(dat.t$Value,dat.t$predValue))
plot(dat.t$Date,dat.t$Value,type="b",pch=16,xlab="Date",ylab="Water Level (mm)",ylim=c(1000,max(2000,y.range[2])))
points(dat.t$Date,dat.t$predValue,type="b",pch=16,col="blue")
legend("top",ncol=2,legend=c("obs","modelled"),lty=1,col=c("black","blue"))
}
dev.off()
pdf("myOut.pdf",width=8,height=10.5,onefile = TRUE)
par(mfrow=c(3,2))
for (i in 1:length(lakes)){
#pull out data for each lake and generate predicted water levels
dat.t = dat %>% filter(BHMID==i) %>% arrange(Date)
dat.t = dat.t %>% mutate(predValue=reg.coef[i,1] + dat.t$precipCMDV*reg.coef[i,2])
#plot relationship between precip and water level
plot(x = dat.t$precipCMDV, y = dat.t$Value,xlab="PrecipCMDV (mm)",
ylab="Water Level (mm)",pch=16,ylim=range(dat$Value),
xlim=range(dat$precipCMDV))
tryCatch({
abline(lm(dat.t$Value~dat.t$precipCMDV),col="lightblue",lwd=2)
},error=function(e){})
abline(a = reg.coef[i,1][[1]],b=reg.coef[i,2][[1]],col="red",lwd=2)
abline(a = out$BUGSoutput$mean$mu.alpha,b=out$BUGSoutput$mean$mu.beta,col="green",lwd=2)
mtext(side=3,line=1,paste(dat.t$SiteName[1], " WiscID:",dat.t$WiscID[1], " WIBIC:",dat.t$WBIC[1],sep=""),cex=.8)
legend('topleft',legend=c("linear","bayesH","global"),lty=1,col=c("lightblue","red","green"))
#plot predicted and observed water levels
y.range = range(c(dat.t$Value,dat.t$predValue))
plot(dat.t$Date,dat.t$Value,type="b",pch=16,xlab="Date",ylab="Water Level (mm)",ylim=c(1000,max(2000,y.range[2])))
points(dat.t$Date,dat.t$predValue,type="b",pch=16,col="blue")
legend("top",ncol=2,legend=c("obs","modeled"),lty=1,col=c("black","blue"))
}
dev.off()
rm(list=ls())
library(readr)
WY_USGS_v3 <- read_csv("~/Downloads/WY_USGS_v3.csv")
View(WY_USGS_v3)
dat = WY_USGS_v3
unique(dat$CharacteristicName)
dat2 = dat %>% filter(CharacteristicName==grep("Inorganic nitrogen"))
dat2 = dat %>% filter(grep("Inorganic nitrogen"),CharacteristicName)
dat2 = dat %>% filter(grepl("Inorganic nitrogen",CharacteristicName))
View(dat2)
names(dat2)
View(dat2)
dat2 = dat %>% filter(grepl("Inorganic nitrogen",CharacteristicName)) %>%
select(ActivityStartDate,ActivityIdentifier,CharacteristicName,ResultSampleFractionText,ResultMeasureValue)
View(dat2)
View(dat)
summary(dat)
View(dat2)
dat2 = dat %>% filter(grepl("Inorganic nitrogen",CharacteristicName)) %>%
select(ActivityStartDate,ActivityIdentifier,CharacteristicName,ResultSampleFractionText,ResultMeasureValue,ActivityDepthHeightMeasure.MeasureValue)
View(dat2)
dat2 = dat %>% filter(grepl("Inorganic nitrogen",CharacteristicName)) %>%
select(ActivityStartDate,ActivityIdentifier,CharacteristicName,ResultSampleFractionText,ResultMeasureValue,ActivityDepthHeightMeasure.MeasureValue) %>%
spread(key = ResultSampleFractionText,value = ResultMeasureValue)
View(dat2)
dat2 = dat %>% filter(grepl("Inorganic nitrogen",CharacteristicName)) %>%
select(ActivityStartDate,ActivityIdentifier,CharacteristicName,ResultSampleFractionText,ResultMeasureValue,ActivityDepthHeightMeasure.MeasureValue) %>%
spread(key = ResultSampleFractionText,value = ResultMeasureValue,drop = c(CharacteristicName,ActivityDepthHeightMeasure.MeasureValue))
dat2 = dat %>% filter(grepl("Inorganic nitrogen",CharacteristicName)) %>%
select(ActivityStartDate,ActivityIdentifier,ResultSampleFractionText,ResultMeasureValue) %>%
spread(key = ResultSampleFractionText,value = ResultMeasureValue)
View(dat2)
plot(dat2$Total,dat2$Dissolved)
plot(dat2$Total,dat2$Dissolved,ylim=c(0,4),xlim=c(0,4))
abline(a=0,b=1)
View(dat2)
plot(dat2$Total,dat2$Dissolved,ylim=c(0,1),xlim=c(0,1))
abline(a=0,b=1)
knitr::opts_chunk$set(echo = TRUE)
dat2 = dat %>% filter(grepl("Inorganic nitrogen",CharacteristicName)) %>%
select(ActivityStartDate,ActivityIdentifier,ResultSampleFractionText,ResultMeasureValue) %>%
spread(key = ResultSampleFractionText,value = ResultMeasureValue)
plot(dat2$Total,dat2$Dissolved,ylim=c(0,1),xlim=c(0,1))
plot(dat2$Total,dat2$Dissolved,ylim=c(0,1),xlim=c(0,1),pch=16)
plot(dat2$Total,dat2$Dissolved,ylim=c(0,0.4),xlim=c(0,0.4),pch=16)
abline(a=0,b=1)
plot(dat2$Total,dat2$Dissolved,ylim=c(0,0.4),xlim=c(0,0.4),pch=16)
abline(a=0,b=1)
dat2 = dat %>% filter(grepl("Inorganic nitrogen",CharacteristicName)) %>%
select(ActivityStartDate,ActivityIdentifier,ResultSampleFractionText,ResultMeasureValue) %>%
spread(key = ResultSampleFractionText,value = ResultMeasureValue)
plot(dat2$Total,dat2$Dissolved,ylim=c(0,0.4),xlim=c(0,0.4),pch=16)
abline(a=0,b=1)
plot(dat2$Total,dat2$Dissolved,ylim=c(0,0.4),xlim=c(0,0.4),pch=16)
library(tidyverse)
dat <- read_csv("~/Downloads/WY_USGS_v3.csv")
dat
dat2 = dat %>% filter(grepl("Inorganic nitrogen",CharacteristicName)) %>%
select(ActivityStartDate,ActivityIdentifier,ResultSampleFractionText,ResultMeasureValue) %>%
spread(key = ResultSampleFractionText,value = ResultMeasureValue) %>% drop_na()
View(dat2)
plot(dat2$Total,dat2$Dissolved,ylim=c(0,0.4),xlim=c(0,0.4),pch=16,xlab="Total",ylab="Dissolved",main="Inorganic Nitrogen")
unique(dat$CharacteristicName)
dat2 = dat %>% filter(grepl("Ammonia",CharacteristicName)) %>%
select(ActivityStartDate,ActivityIdentifier,ResultSampleFractionText,ResultMeasureValue) %>%
spread(key = ResultSampleFractionText,value = ResultMeasureValue) %>% drop_na()
dat2 = dat %>% filter(grepl("Ammonia",CharacteristicName)) %>%
select(ActivityStartDate,ActivityIdentifier,ResultSampleFractionText,ResultMeasureValue)
View(dat2)
names(dat)
dat2 = dat %>% filter(grepl("Ammonia",CharacteristicName)) %>%
select(ActivityStartDate,ActivityIdentifier,ResultSampleFractionText,ResultMeasureValue,
MonitoringLocationIdentifier) %>%
spread(key = ResultSampleFractionText,value = ResultMeasureValue) %>% drop_na()
dat2 = dat %>% filter(grepl("Ammonia",CharacteristicName)) %>%
select(ActivityStartDate,ActivityIdentifier,ResultSampleFractionText,ResultMeasureValue,
MonitoringLocationIdentifier,ActivityDepthHeightMeasure.MeasureValue) %>%
spread(key = ResultSampleFractionText,value = ResultMeasureValue) %>% drop_na()
dat2 = dat %>% filter(grepl("Ammonia",CharacteristicName)) %>%
select(ActivityStartDate,ActivityIdentifier,ResultSampleFractionText,ResultMeasureValue,
MonitoringLocationIdentifier,ActivityDepthHeightMeasure.MeasureValue)
View(dat2)
View(dat)
dat2 = dat %>% filter(grepl("Ammonia",CharacteristicName)) %>%
select(ActivityStartDate,ActivityIdentifier,ResultSampleFractionText,ResultMeasureValue,
MonitoringLocationIdentifier,ActivityDepthHeightMeasure.MeasureValue,ActivityTypeCode)
View(dat2)
View(dat)
dat2 = dat %>% filter(grepl("Ammonia",CharacteristicName)) %>%
select(ActivityStartDate,ActivityIdentifier,ResultSampleFractionText,ResultMeasureValue,
ActivityDepthHeightMeasure.MeasureValue,ActivityTypeCode,ActivityStartTime.Time)
View(dat2)
dat2 = dat %>% filter(grepl("Ammonia",CharacteristicName)) %>%
select(ActivityStartDate,ActivityIdentifier,ResultSampleFractionText,ResultMeasureValue,
ActivityDepthHeightMeasure.MeasureValue,ActivityTypeCode,ActivityStartTime.Time) %>%
drop_na(ResultMeasureValue)
View(dat2)
View(dat)
dat2 = dat %>% filter(grepl("Ammonia",CharacteristicName)) %>%
select(ActivityStartDate,ActivityIdentifier,ResultSampleFractionText,ResultMeasureValue,
ResultMeasure.MeasureUnitCode)
View(dat2)
dat2 = dat %>% filter(grepl("Ammonia",CharacteristicName)) %>%
select(ActivityStartDate,ActivityIdentifier,ResultSampleFractionText,ResultMeasureValue,
ResultMeasure.MeasureUnitCode) %>%
drop_na(ResultMeasureValue)
View(dat2)
dat2 = dat %>% filter(grepl("Ammonia",CharacteristicName)) %>%
select(ActivityStartDate,ActivityIdentifier,ResultSampleFractionText,ResultMeasureValue,
ResultMeasure.MeasureUnitCode) %>%
drop_na(ResultMeasureValue) %>%
spread(key = ResultSampleFractionText,value = ResultMeasureValue) %>% drop_na()
View(dat2)
dat2
plot(dat2$Total,dat2$Dissolved,ylim=c(0,0.4),xlim=c(0,0.4),pch=16,xlab="Total",ylab="Dissolved",main="NH4")
abline(a=0,b=1)
```{r plotnh4,echo=FALSE}
plot(dat2$Total,dat2$Dissolved,ylim=c(0,0.4),xlim=c(0,0.4),pch=16,xlab="Total",ylab="Dissolved",main="NH4")
plot(dat2$Total,dat2$Dissolved,pch=16,xlab="Total",ylab="Dissolved",main="NH4")
t.test(x = dat2$Total,y=dat2$Dissolved)
dat2 = dat %>% filter(grepl("Nitrate",CharacteristicName)) %>%
select(ActivityStartDate,ActivityIdentifier,ResultSampleFractionText,ResultMeasureValue,
ResultMeasure.MeasureUnitCode) %>%
drop_na(ResultMeasureValue) %>%
spread(key = ResultSampleFractionText,value = ResultMeasureValue) %>% drop_na()
View(dat2)
dat2 = dat %>% filter(grepl("Nitrate",CharacteristicName)) %>%
select(ActivityStartDate,ActivityIdentifier,ResultSampleFractionText,ResultMeasureValue,
ResultMeasure.MeasureUnitCode)
View(dat2)
dat2 = dat %>% filter(grepl("Ammonia",CharacteristicName)) %>%
select(ActivityStartDate,ActivityIdentifier,ResultSampleFractionText,ResultMeasureValue,
ResultMeasure.MeasureUnitCode) %>%
drop_na(ResultMeasureValue) %>%
spread(key = ResultSampleFractionText,value = ResultMeasureValue) %>% drop_na() %>%
filter(ResultMeasure.MeasureUnitCode=="NH4")
dat2
dat2 = dat %>% filter(grepl("Ammonia",CharacteristicName)) %>%
select(ActivityStartDate,ActivityIdentifier,ResultSampleFractionText,ResultMeasureValue,
ResultMeasure.MeasureUnitCode) %>%
drop_na(ResultMeasureValue) %>%
spread(key = ResultSampleFractionText,value = ResultMeasureValue) %>% drop_na() %>%
filter(grepl("NH4",ResultMeasure.MeasureUnitCode))
View(dat2)
