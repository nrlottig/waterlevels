table(waterlevelclusterID[,5])
table(waterlevelclusterID[,4])
# predictors = predictors[c(5,6,7,8,9,11,12,13)]
big.formula = easy.formula(response, predictors)
rf.data = randomForest(big.formula,data=waterlevelclusterID,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=31)
pred = predict(rf.data)
(conf.out = confusionMatrix(pred,waterlevelclusterID$clusterid_dtw1_4))
table(waterlevelclusterID[,5])
(response = names(waterlevelclusterID)[5])
# predictors = predictors[c(5,6,7,8,9,11,12,13)]
big.formula = easy.formula(response, predictors)
rf.data = randomForest(big.formula,data=waterlevelclusterID,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=34)
rf.data
pred = predict(rf.data)
(conf.out = confusionMatrix(pred,waterlevelclusterID$clusterid_dtw1_4))
(conf.out = confusionMatrix(pred,waterlevelclusterID$clusterid_dtw2_4))
(response = names(waterlevelclusterID)[3])
table(waterlevelclusterID[,3])
# predictors = predictors[c(5,6,7,8,9,11,12,13)]
big.formula = easy.formula(response, predictors)
rf.data = randomForest(big.formula,data=waterlevelclusterID,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=39)
rf.data
pred = predict(rf.data)
(conf.out = confusionMatrix(pred,waterlevelclusterID$clusterid_dtw1_3))
Y = waterlevelclusterID[[5]]
Y
X = waterlevelclusterID[,c(6:8,10:179)]
(rf.data = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001))
table(waterlevelclusterID[,5])
(rf.data = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001),sampsize=34)
(rf.data = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=34)
(rf.data = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=34))
med.vsurf = VSURF(x = X,y = Y)
install.packages("VSURF")
require(VSURF)
med.vsurf = VSURF(x = X,y = Y)
length(med.vsurf$varselect.pred)
names(X[med.vsurf$varselect.pred])
X = X[,med.vsurf$varselect.pred]
(rf.data2 = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001))
table(waterlevelclusterID[,5])
(response = names(waterlevelclusterID)[5])
(conf.out = confusionMatrix(pred,waterlevelclusterID$clusterid_dtw2_4))
X
Y
(conf.out = confusionMatrix(pred,Y))
(rf.data2 = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001),sampsize=34))
(rf.data2 = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=34))
pred = predict(rf.data2)
(conf.out = confusionMatrix(pred,Y))
View(X)
library(forestFloor)
install.packages("forestFloor")
library(forestFloor)
ff = forestFloor(rf.fit=rf.data2,X=X,bootstrapFC = TRUE)
Col=fcol(ff,1)
par(mfrow=c(1,1))
plot(ff,col=Col,orderByImportance=TRUE)
pplot<-partialPlot(mod,dat,x.var = names(dat)[i],xlab=names(dat)[i])
Y
Col=fcol(ff,3)
par(mfrow=c(1,1))
plot(ff,col=Col,orderByImportance=TRUE)
imp.out = importance(rf.data2)
imp.out = importance(rf.data2)
X = X[order(imp.out[,1],decreasing = TRUE)]
options(device="quartz")
dev.new(width=6,height=4)
par(oma=c(1.2,.8,.2,.2),mar=c(0,0,0,0),family="Times",ps=10)
dotplot(imp.out[order(imp.out[,1],decreasing = FALSE),1],main="",xlab="Increase Mean Square Error (%)")
save.image("~/Documents/GitHub/waterlevels/WaterLevels.RData")
X
ff = forestFloor(rf.fit=rf.data2,X=X[,-3],bootstrapFC = TRUE)
ff = forestFloor(rf.fit=rf.data2,X=X,bootstrapFC = TRUE)
fcol
?fcol
Col=fcol(ff,cols=c("red","blue","green","purple"))
Col=fcol(ff,cols=1)
par(mfrow=c(1,1))
plot(ff,col=Col,orderByImportance=TRUE)
names(X)
Col=fcol(ff,cols=3)
plot(ff,col=Col,orderByImportance=TRUE)
Col=fcol(ff,cols=2)
par(mfrow=c(1,1))
plot(ff,col=Col,orderByImportance=TRUE)
med.vsurf
med.vsurf$varselect.interp
med.vsurf$varselect.pred
names(X[med.vsurf$varselect.pred])
X = waterlevelclusterID[,c(6:8,10:179)]
names(X[med.vsurf$varselect.pred])
X = X[,med.vsurf$varselect.interp]
names(X[med.vsurf$varselect.interp])
X = waterlevelclusterID[,c(6:8,10:179)]
names(X[med.vsurf$varselect.interp])
X = X[,med.vsurf$varselect.interp]
(rf.data2 = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=34))
pred = predict(rf.data2)
(conf.out = confusionMatrix(pred,Y))
imp.out = importance(rf.data2)
X = X[order(imp.out[,1],decreasing = TRUE)]
dotplot(imp.out[order(imp.out[,1],decreasing = FALSE),1],main="",xlab="Increase Mean Square Error (%)")
ff = forestFloor(rf.fit=rf.data2,X=X,bootstrapFC = TRUE)
Col=fcol(ff,cols=2)
par(mfrow=c(1,1))
plot(ff,col=Col,orderByImportance=TRUE)
?fcol
plot(ff,col=Col)
ff
?show3d
show3d(ff,1:2,col=Col)
plot(ff)
X = X[,med.vsurf$varselect.pre]
X = waterlevelclusterID[,c(6:8,10:179)]
X = X[,med.vsurf$varselect.pred]
X
X= X[,-c(1,2)]
X
(rf.data2 = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=34))
pred = predict(rf.data2)
(conf.out = confusionMatrix(pred,Y))
X = waterlevelclusterID[,c(6:8,10:179)]
X = X[,med.vsurf$varselect.pred]
X
X=X[,-2]
(rf.data2 = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=34))
pred = predict(rf.data2)
(conf.out = confusionMatrix(pred,Y))
imp.out = importance(rf.data2)
X = X[order(imp.out[,1],decreasing = TRUE)]
# options(device="quartz")
# dev.new(width=6,height=4)
par(oma=c(1.2,.8,.2,.2),mar=c(0,0,0,0),family="Times",ps=10)
dotplot(imp.out[order(imp.out[,1],decreasing = FALSE),1],main="",xlab="Increase Mean Square Error (%)")
ff = forestFloor(rf.fit=rf.data2,X=X,bootstrapFC = TRUE)
plot(ff)
plot(ff,cex=2)
plot(ff,cex.pt=1)
plot(ff)
plot(ff)
?plot
?par
par(cex.axis=1.5,cex.lab=2,cex.main=1.5)
plot(ff)
X = waterlevelclusterID[,c(6:8,10:179)]
X = X[,med.vsurf$varselect.interp]
(rf.data2 = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=34))
pred = predict(rf.data2)
(conf.out = confusionMatrix(pred,Y))
imp.out = importance(rf.data2)
X = X[order(imp.out[,1],decreasing = TRUE)]
options(device="quartz")
dev.new(width=6,height=4)
par(oma=c(1.2,.8,.2,.2),mar=c(0,0,0,0),family="Times",ps=10)
dotplot(imp.out[order(imp.out[,1],decreasing = FALSE),1],main="",xlab="Increase Mean Square Error (%)")
ff = forestFloor(rf.fit=rf.data2,X=X,bootstrapFC = TRUE)
par(mfrow=c(1,1))
dev.new(width=9,height=3)
par(oma=c(1.2,.8,.2,.2),mar=c(0,0,0,0),family="Times",ps=10,cex.axis=1.5,cex.lab=2,cex.main=1.5)
plot(ff)
dev.new(width=9,height=4)
par(oma=c(1.2,.8,.2,.2),mar=c(0,0,0,0),family="Times",ps=10,cex.axis=1.5,cex.lab=2,cex.main=1.5)
plot(ff)
names(X[med.vsurf$varselect.interp])
X = waterlevelclusterID[,c(6:8,10:179)]
names(X[med.vsurf$varselect.interp])
save.image("~/Documents/GitHub/waterlevels/WaterLevels.RData")
map.regions = c('wisconsin')
map('state',region=map.regions,col=grey(.98),fill=TRUE,resolution = 0,mar=c(0,0,0,0),border=grey(.5),lty=5)
install.packages("maps")
library(maps)
library(maptools)
map.regions = c('wisconsin')
map('state',region=map.regions,col=grey(.98),fill=TRUE,resolution = 0,mar=c(0,0,0,0),border=grey(.5),lty=5)
dev.new(width=4,height=6)
map('state',region=map.regions,col=grey(.98),fill=TRUE,resolution = 0,mar=c(0,0,0,0),border=grey(.5),lty=5)
dev.off()
dev.new(width=4,height=5)
map('state',region=map.regions,col=grey(.98),fill=TRUE,resolution = 0,mar=c(0,0,0,0),border=grey(.5),lty=5)
dev.new(width=5,height=5)
map('state',region=map.regions,col=grey(.98),fill=TRUE,resolution = 0,mar=c(0,0,0,0),border=grey(.5),lty=5)
points(waterlevelclusterID$Longitude,waterlevelclusterID$Latitude,col=as.numeric(waterlevelclusterID$clusterid_dtw2_4)
points(waterlevelclusterID$Longitude,waterlevelclusterID$Latitude,col=as.numeric(waterlevelclusterID$clusterid_dtw2_4))
points(waterlevelclusterID$Longitude,waterlevelclusterID$Latitude,col=as.numeric(waterlevelclusterID$clusterid_dtw2_4),pch=16)
library(scales)
points(waterlevelclusterID$Longitude,waterlevelclusterID$Latitude,col=alpha(as.numeric(waterlevelclusterID$clusterid_dtw2_4,.7)),pch=16)
points(waterlevelclusterID$Longitude,waterlevelclusterID$Latitude,col=alpha(as.numeric(waterlevelclusterID$clusterid_dtw2_4),.7),pch=16)
map('state',region=map.regions,col=grey(.98),fill=TRUE,resolution = 0,mar=c(0,0,0,0),border=grey(.5),lty=5)
points(waterlevelclusterID$Longitude,waterlevelclusterID$Latitude,col=alpha(as.numeric(waterlevelclusterID$clusterid_dtw2_4),.7),pch=16)
legend("topright",legend=c(1:34),pch=16,col=c(1:4))
map('state',region=map.regions,col=grey(.98),fill=TRUE,resolution = 0,mar=c(0,0,0,0),border=grey(.5),lty=5)
points(waterlevelclusterID$Longitude,waterlevelclusterID$Latitude,col=alpha(as.numeric(waterlevelclusterID$clusterid_dtw2_4),.7),pch=16)
legend("topright",legend=c(1:4),pch=16,col=c(1:4))
legend("topright",legend=c(1:4),pch=16,col=c(1:4),title = "Cluster")
?legend
map('state',region=map.regions,col=grey(.98),fill=TRUE,resolution = 0,mar=c(0,0,0,0),border=grey(.5),lty=5)
points(waterlevelclusterID$Longitude,waterlevelclusterID$Latitude,col=alpha(as.numeric(waterlevelclusterID$clusterid_dtw2_4),.7),pch=16)
legend("topright",legend=c(1:4),pch=16,col=c(1:4),title = "Cluster ID",bty="n")
(conf.out = confusionMatrix(pred,Y))
rf.drivers = data.frame(wiscwaterlevelid=waterlevelclusterID$wiscwaterlevelid,clusterid = waterlevelclusterID$clusterid_dtw2_4,clusterpred=pred,meanrunnoff=waterlevelclusterID$hu12_runoff_mean,maxrunnoff=waterlevelclusterID$hu12_runoff_max,maxprecip=waterlevelclusterID$hu12_prism_ppt_30yr_normal_800mm2_annual_max)
View(rf.drivers)
boxplot(rf.drivers$clusterid~rf.drivers$meanrunnoff)
boxplot(rf.drivers$meanrunnoff~rf.drivers$clusterid)
dev.new(width=4,height=4)
boxplot(rf.drivers$meanrunnoff~rf.drivers$clusterid)
par(oma=c(1.2,.8,.2,.2),mar=c(0,0,0,0),family="Times",ps=10,cex.axis=1.5,cex.lab=2,cex.main=1.5)
boxplot(rf.drivers$meanrunnoff~rf.drivers$clusterid)
par(oma=c(3,3,.2,.2),mar=c(0,0,0,0),family="Times",ps=10,cex.axis=1.5,cex.lab=2,cex.main=1.5)
boxplot(rf.drivers$meanrunnoff~rf.drivers$clusterid)
par(oma=c(3,3,.2,.2),mar=c(0,0,0,0),family="Times",ps=10)
boxplot(rf.drivers$meanrunnoff~rf.drivers$clusterid)
dev.off()
dev.new(width=4,height=4)
par(oma=c(3,3,.2,.2),mar=c(0,0,0,0),family="Times",ps=10)
boxplot(rf.drivers$meanrunnoff~rf.drivers$clusterid)
boxplot(rf.drivers$meanrunnoff~rf.drivers$clusterid,xlab="Cluster ID",ylab="Runoff (in/yr)")
dev.new(width=4,height=4)
par(oma=c(3,3,.2,.2),mar=c(0,0,0,0),family="Times",ps=10)
boxplot(rf.drivers$meanrunnoff~rf.drivers$clusterid,xlab="Cluster ID",ylab="Runoff (in/yr)")
boxplot(rf.drivers$meanrunnoff~rf.drivers$clusterid,xlab="",ylab="R")
mtext(side=1,line=-2,"Cluster ID")
mtext(side=1,line=2,"Cluster ID")
mtext(side=1,line=1.8,"Cluster ID",cex=1.5)
mtext(side=1,line=2,"Cluster ID",cex=1.5)
boxplot(rf.drivers$meanrunnoff~rf.drivers$clusterid,xlab="",ylab="R")
mtext(side=1,line=2,"Cluster ID",cex=1.5)
boxplot(rf.drivers$meanrunnoff~rf.drivers$clusterid,xlab="",ylab="R")
mtext(side=1,line=2,"Cluster ID",cex=1.25)
mtext(side=2,line=2,"Runnoff (in/yr)",cex=1.25)
mtext(side=2,line=2,"Mean Runnoff (in/yr)",cex=1.25)
boxplot(rf.drivers$meanrunnoff~rf.drivers$clusterid,xlab="",ylab="R")
mtext(side=1,line=2,"Cluster ID",cex=1.25)
mtext(side=2,line=2,"Mean Runnoff (in/yr)",cex=1.25)
boxplot(rf.drivers$maxrunnoff~rf.drivers$clusterid,xlab="",ylab="R")
boxplot(rf.drivers$maxprecip~rf.drivers$clusterid,xlab="",ylab="")
dev.off()
graphics.off()
dev.new(width=4,height=4)
par(oma=c(3,3,.2,.2),mar=c(0,0,0,0),family="Times",ps=10)
boxplot(rf.drivers$maxprecip~rf.drivers$clusterid,xlab="",ylab="")
mtext(side=1,line=2,"Cluster ID",cex=1.25)
mtext(side=2,line=2,"Max Precip (mm/yr)",cex=1.25)
save.image("~/Documents/GitHub/waterlevels/WaterLevels.RData")
dtw2_4_validation <- read.csv("~/Documents/GitHub/waterlevels/data/dtw2_4_validation.csv")
View(dtw2_4_validation)
plot(dtw2_4_validation$num_clust,dtw2_4_validation$Rand_DTW,ylim=range(dtw2_4_validation[,c(2:3)]))
plot(dtw2_4_validation$num_clust,dtw2_4_validation$Rand_DTW,ylim=range(dtw2_4_validation[,c(2:3)]),type="b",col="blue")
plot(dtw2_4_validation$num_clust,dtw2_4_validation$Rand_DTW,ylim=range(dtw2_4_validation[,c(2:3)]),type="b",col="blue",pch=16)
plot(dtw2_4_validation$num_clust,dtw2_4_validation$Rand_DTW,ylim=range(dtw2_4_validation[,c(2:3)]),type="b",col="blue",pch=16,lwd=2)
plot(dtw2_4_validation$num_clust,dtw2_4_validation$Rand_DTW,ylim=range(dtw2_4_validation[,c(2:3)]),type="b",col="blue",pch=16,lwd=2,xlab="",ylab="")
lines(dtw2_4_validation$num_clust,dtw2_4_validation$Cluster_DTW,type="b",col="red",pch=16,lwd=2)
lines(dtw2_4_validation$num_clust,dtw2_4_validation$DTW_DIFF,type="b",col="green",pch=16,lwd=2)
mtext(side=2,line=2,"DTW Distance",cex=1.25)
mtext(side=2,line=2,"DTW Distance",cex=1.25)
mtext(side=1,line=2,"Number of Clusters",cex=1.25)
legend("right",legend=c("Random Clustering","Kernal Clustering","Difference"))
legend("right",legend=c("Random Clustering","Kernal Clustering","Difference"),pch=16,lwd=2,col=c("blue","red","green"))
par(oma=c(3,3,.2,.2),mar=c(0,0,0,0),family="Times",ps=10)
plot(dtw2_4_validation$num_clust,dtw2_4_validation$Rand_DTW,ylim=range(dtw2_4_validation[,c(2:3)]),type="b",col="blue",pch=16,lwd=2,xlab="",ylab="")
lines(dtw2_4_validation$num_clust,dtw2_4_validation$Cluster_DTW,type="b",col="red",pch=16,lwd=2)
lines(dtw2_4_validation$num_clust,dtw2_4_validation$DTW_DIFF,type="b",col="green",pch=16,lwd=2)
mtext(side=1,line=2,"Number of Clusters",cex=1.25)
mtext(side=2,line=2,"DTW Distance",cex=1.25)
legend("right",legend=c("Random Clustering","Kernal Clustering","Difference"),pch=16,lwd=2,col=c("blue","red","green"),bty="n")
dev.new(width=4,height=4)
dev.off()
dev.new(width=4,height=4)
par(oma=c(3,3,.2,.2),mar=c(0,0,0,0),family="Times",ps=10)
plot(dtw2_4_validation$num_clust,dtw2_4_validation$Rand_DTW,ylim=range(dtw2_4_validation[,c(2:3)]),type="b",col="blue",pch=16,lwd=2,xlab="",ylab="")
lines(dtw2_4_validation$num_clust,dtw2_4_validation$Cluster_DTW,type="b",col="red",pch=16,lwd=2)
lines(dtw2_4_validation$num_clust,dtw2_4_validation$DTW_DIFF,type="b",col="green",pch=16,lwd=2)
mtext(side=1,line=2,"Number of Clusters",cex=1.25)
mtext(side=2,line=2,"DTW Distance",cex=1.25)
legend("right",legend=c("Random Clustering","Kernal Clustering","Difference"),pch=16,lwd=2,col=c("blue","red","green"),bty="n")
graphics.off()
dev.new(width=4,height=4)
options(device="quartz")
dev.new(width=4,height=4)
par(oma=c(3,3,.2,.2),mar=c(0,0,0,0),family="Times",ps=10)
plot(dtw2_4_validation$num_clust,dtw2_4_validation$Rand_DTW,ylim=range(dtw2_4_validation[,c(2:3)]),type="b",col="blue",pch=16,lwd=2,xlab="",ylab="")
lines(dtw2_4_validation$num_clust,dtw2_4_validation$Cluster_DTW,type="b",col="red",pch=16,lwd=2)
lines(dtw2_4_validation$num_clust,dtw2_4_validation$DTW_DIFF,type="b",col="green",pch=16,lwd=2)
mtext(side=1,line=2,"Number of Clusters",cex=1.25)
mtext(side=2,line=2,"DTW Distance",cex=1.25)
legend("right",legend=c("Random Clustering","Kernal Clustering","Difference"),pch=16,lwd=2,col=c("blue","red","green"),bty="n")
save.image("~/Documents/GitHub/waterlevels/WaterLevels.RData")
library(readr)
hicap_wells <- read_csv("data/hicap_wells.csv",
col_types = cols(FID_1 = col_skip(),
Latitude = col_skip(), Longitude = col_skip(),
SiteID = col_skip(), SiteType = col_skip(),
clustid1 = col_skip(), clustid2 = col_skip(),
clustid3 = col_skip()))
View(hicap_wells)
names(hicap_wells)[1] = "wiscwaterlevelid"
waterlevelclusterID= merge(waterlevelclusterID,hicap_wells)
View(waterlevelclusterID)
names(waterlevelclusterID)
names(waterlevelclusterID)[180:182] = c("Dist_hicap","num_hicap","hicap_GPD")
names(waterlevelclusterID)
rm(hicap_wells)
rm(hu4)
rm(hu8)
rm(huc12)
rm(hucids)
##########Random Forest Modeling
#set response variable
(response= names(waterlevelclusterID)[5])
#check counts for balancing RF model
table(waterlevelclusterID[,5])
(predictors = names(waterlevelclusterID)[c(6:8,10:182)])
big.formula = easy.formula(response, predictors)
source('~/Documents/GitHub/waterlevels/Scripts/RF Models.R', echo=TRUE)
load("~/Documents/GitHub/waterlevels/WaterLevels.RData")
library(readr)
hicap_wells <- read_csv("data/hicap_wells.csv",
col_types = cols(FID_1 = col_skip(),
Latitude = col_skip(), Longitude = col_skip(),
SiteID = col_skip(), SiteType = col_skip(),
clustid1 = col_skip(), clustid2 = col_skip(),
clustid3 = col_skip()))
View(hicap_wells)
waterlevelclusterID= merge(waterlevelclusterID,hicap_wells)
rm(hu4)
rm(hu8)
rm(hicap_wells)
View(waterlevelclusterID)
names(waterlevelclusterID)
load("~/Documents/GitHub/waterlevels/WaterLevels.RData")
library(readr)
hicap_wells <- read_csv("data/hicap_wells.csv",
col_types = cols(FID_1 = col_skip(),
Latitude = col_skip(), Longitude = col_skip(),
SiteID = col_skip(), SiteType = col_skip(),
clustid1 = col_skip(), clustid2 = col_skip(),
clustid3 = col_skip()))
View(hicap_wells)
names(hicap_wells)[1] = "wiscwaterlevelid"
waterlevelclusterID = merge(waterlevelclusterID,hicap_wells)
names(waterlevelclusterID)[180:182] = c("Dist_hicap","num_hicap","hicap_GPD")
rm(hu4)
rm(hu8)
rm(hu12)
rm(huc12)
rm(hucids)
rm(hicap_wells)
save.image("~/Documents/GitHub/waterlevels/WaterLevels.RData")
##########Random Forest Modeling
#set response variable
(response= names(waterlevelclusterID)[5])
#check counts for balancing RF model
table(waterlevelclusterID[,5])
(predictors = names(waterlevelclusterID)[c(6:8,10:182)])
big.formula = easy.formula(response, predictors)
(rf.data = randomForest(big.formula,data=waterlevelclusterID,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=34))
pred = predict(rf.data)
(conf.out = confusionMatrix(pred,waterlevelclusterID$clusterid_dtw1_3))
(conf.out = confusionMatrix(pred,waterlevelclusterID$clusterid_dtw2_4))
##########Random Forest Modeling
#set response variable
(response= names(waterlevelclusterID)[3])
#check counts for balancing RF model
table(waterlevelclusterID[,3])
(predictors = names(waterlevelclusterID)[c(6:8,10:182)])
big.formula = easy.formula(response, predictors)
(rf.data = randomForest(big.formula,data=waterlevelclusterID,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=39))
pred = predict(rf.data)
(conf.out = confusionMatrix(pred,waterlevelclusterID$clusterid_dtw2_4))
(conf.out = confusionMatrix(pred,waterlevelclusterID$clusterid_dtw1_3))
##########Random Forest Modeling
#set response variable
(response= names(waterlevelclusterID)[5])
#check counts for balancing RF model
table(waterlevelclusterID[,3])
#check counts for balancing RF model
table(waterlevelclusterID[,5])
(predictors = names(waterlevelclusterID)[c(6:8,10:182)])
big.formula = easy.formula(response, predictors)
(rf.data = randomForest(big.formula,data=waterlevelclusterID,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=34))
pred = predict(rf.data)
(conf.out = confusionMatrix(pred,waterlevelclusterID$clusterid_dtw2_4))
#check counts for balancing RF model
table(waterlevelclusterID[,3])
##########Random Forest Modeling
#set response variable
(response= names(waterlevelclusterID)[3])
#check counts for balancing RF model
table(waterlevelclusterID[,3])
(predictors = names(waterlevelclusterID)[c(6:8,10:182)])
big.formula = easy.formula(response, predictors)
(rf.data = randomForest(big.formula,data=waterlevelclusterID,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=39))
pred = predict(rf.data)
(conf.out = confusionMatrix(pred,waterlevelclusterID$clusterid_dtw1_3))
Y = waterlevelclusterID[[3]]
X = waterlevelclusterID[,c(6:8,10:182)]
(rf.data = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=39))
pred = predict(rf.data)
(conf.out = confusionMatrix(pred,waterlevelclusterID$clusterid_dtw1_3))
med.vsurf = VSURF(x = X,y = Y)
length(med.vsurf$varselect.pred)
names(X[med.vsurf$varselect.interp])
names(X[med.vsurf$varselect.pred])
X = X[,med.vsurf$varselect.pred]
(rf.data2 = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=39))
pred = predict(rf.data2)
(conf.out = confusionMatrix(pred,Y))
imp.out = importance(rf.data2)
X = X[order(imp.out[,1],decreasing = TRUE)]
options(device="quartz")
dev.new(width=6,height=4)
dotplot(imp.out[order(imp.out[,1],decreasing = FALSE),1],main="",xlab="Increase Mean Square Error (%)")
ff = forestFloor(rf.fit=rf.data2,X=X,bootstrapFC = TRUE)
dev.new(width=9,height=4)
par(oma=c(1.2,.8,.2,.2),mar=c(0,0,0,0),family="Times",ps=10,cex.axis=1.5,cex.lab=2,cex.main=1.5)
plot(ff)
Y = waterlevelclusterID[[5]]
X = waterlevelclusterID[,c(6:8,10:182)]
#check counts for balancing RF model
table(waterlevelclusterID[,5])
Y = waterlevelclusterID[[5]]
X = waterlevelclusterID[,c(6:8,10:182)]
(rf.data = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=34))
pred = predict(rf.data)
(conf.out = confusionMatrix(pred,Y))
med.vsurf = VSURF(x = X,y = Y)
length(med.vsurf$varselect.pred)
names(X[med.vsurf$varselect.pred])
X = X[,med.vsurf$varselect.pred]
(rf.data2 = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=34))
pred = predict(rf.data2)
(conf.out = confusionMatrix(pred,Y))
imp.out = importance(rf.data2)
X = X[order(imp.out[,1],decreasing = TRUE)]
options(device="quartz")
dev.new(width=6,height=4)
par(oma=c(1.2,.8,.2,.2),mar=c(0,0,0,0),family="Times",ps=10)
dotplot(imp.out[order(imp.out[,1],decreasing = FALSE),1],main="",xlab="Increase Mean Square Error (%)")
ff = forestFloor(rf.fit=rf.data2,X=X,bootstrapFC = TRUE)
dev.new(width=9,height=4)
par(oma=c(1.2,.8,.2,.2),mar=c(0,0,0,0),family="Times",ps=10,cex.axis=1.5,cex.lab=2,cex.main=1.5)
plot(ff)
names(X[med.vsurf$varselect.interp])
names(X[med.vsurf$varselect.interp])
length(med.vsurf$varselect.interp)
dev.new(width=4,height=4)
par(oma=c(3,3,.2,.2),mar=c(0,0,0,0),family="Times",ps=10)
boxplot(waterlevelclusterID$Dist_hicap~waterlevelclusterID$clusterid_dtw2_4,xlab="",ylab="")
Y = waterlevelclusterID[[5]]
X = waterlevelclusterID[,c(6,10:182)]
(rf.data = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=34))
pred = predict(rf.data)
(conf.out = confusionMatrix(pred,Y))
Y = waterlevelclusterID[[3]]
X = waterlevelclusterID[,c(6,10:182)]
(rf.data = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=34))
pred = predict(rf.data)
(conf.out = confusionMatrix(pred,Y))
Y = waterlevelclusterID[[5]]
X = waterlevelclusterID[,c(6,10:182)]
(rf.data = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=34))
pred = predict(rf.data)
(conf.out = confusionMatrix(pred,Y))
med.vsurf = VSURF(x = X,y = Y)
length(med.vsurf$varselect.interp)
names(X[med.vsurf$varselect.interp])
names(X[med.vsurf$varselect.pred])
names(X)
med.vsurf
names(X[med.vsurf$varselect.pred])
length(med.vsurf$varselect.interp)
names(X[med.vsurf$varselect.pred])
X = X[,med.vsurf$varselect.pred]
(rf.data2 = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=34))
pred = predict(rf.data2)
(conf.out = confusionMatrix(pred,Y))
ff = forestFloor(rf.fit=rf.data2,X=X,bootstrapFC = TRUE)
dev.new(width=9,height=4)
par(oma=c(1.2,.8,.2,.2),mar=c(0,0,0,0),family="Times",ps=10,cex.axis=1.5,cex.lab=2,cex.main=1.5)
plot(ff)
X
Col=fcol(ff,cols=1)
dev.new(width=9,height=4)
par(oma=c(1.2,.8,.2,.2),mar=c(0,0,0,0),family="Times",ps=10,cex.axis=1.5,cex.lab=2,cex.main=1.5)
plot(ff)
plot(ff,col=cols)
plot(ff,col=Col)
Col=fcol(ff,cols=1)
?fcol
Col=fcol(ff,cols=2)
dev.new(width=9,height=4)
par(oma=c(1.2,.8,.2,.2),mar=c(0,0,0,0),family="Times",ps=10,cex.axis=1.5,cex.lab=2,cex.main=1.5)
plot(ff,col=Col)
ffcol=fcol(ff,cols=2)
ffcol
plot(ff,col=Col)
plot(ff,col=fcol(ff,1,orderByImportance = FALSE),orderByImportance = FALSE)
X
str(X)
plot(ff,col=fcol(ff,1:2)
)
plot(ff,col=fcol(ff,1:2,order=FALSE,X.matrix = FALSE,saturation=.95))
plot(ff,col=fcol(ff,1))
plot(ff)
plot(waterlevelclusterID$Latitude,waterlevelclusterID$hu12_runoff_mean)
plot(ff)
(conf.out = confusionMatrix(pred,Y))
save.image("~/Documents/GitHub/waterlevels/WaterLevels.RData")
plot(ff)
plot(waterlevelclusterID$Latitude,waterlevelclusterID$Dist_hicap)
plot(ff)
plot(waterlevelclusterID$Latitude,waterlevelclusterID$hu12_runoff_mean)
