waterlevelclusterID = as.data.frame(waterlevelclusterID)
for(i in 1:length(factor.cols)){
waterlevelclusterID[,factor.cols[i]] = as.factor(waterlevelclusterID[,factor.cols[i]])
}
X = waterlevelclusterID[,c(7,13:24,29:80,85:155,160:180,182:183,185:188)] #remove runnoff
(rf.data = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=46))
pred = predict(rf.data)
(conf.out = confusionMatrix(pred,Y))
med.vsurf = VSURF(x = X,y = Y,parallel = TRUE,ncores = 7,ntree = 5001,clusterType = "FORK")
names(X[med.vsurf$varselect.pred])
names(X[med.vsurf$varselect.interp])
# med.vsurf.dtw13.dmv13 = med.vsurf #Save output for future use.
X = X[,med.vsurf$varselect.pred]
(rf.data2 = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=46))
pred = predict(rf.data2)
(conf.out = confusionMatrix(pred,Y))
names(X[med.vsurf$varselect.pred])
X = waterlevelclusterID[,c(7,13:24,29:80,85:155,160:180,182:183,185:188)] #remove runnoff
names(X)
str(X)
X
names(X)
(rf.data = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=46))
pred = predict(rf.data)
(conf.out = confusionMatrix(pred,Y))
med.vsurf = VSURF(x = X,y = Y,parallel = TRUE,ncores = 7,ntree = 5001,clusterType = "FORK")
names(X[med.vsurf$varselect.interp])
names(X[med.vsurf$varselect.pred])
med.vsurf = VSURF(x = X,y = Y,parallel = TRUE,ncores = 7,ntree = 5001,clusterType = "FORK",sampsize=46)
names(X[med.vsurf$varselect.pred])
names(X)
X
Y
(rf.data = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=46))
pred = predict(rf.data)
(conf.out = confusionMatrix(pred,Y))
med.vsurf = VSURF(x = X,y = Y,parallel = TRUE,ncores = 7,ntree = 5001,clusterType = "FORK",sampsize=46)
names(X[med.vsurf$varselect.pred])
med.vsurf = VSURF(x = X,y = Y,parallel = TRUE,ncores = 7,clusterType = "FORK",sampsize=46)
names(X[med.vsurf$varselect.interp])
names(X[med.vsurf$varselect.pred])
med.vsurf = VSURF(x = X,y = Y,parallel = TRUE,ncores = 7)
names(X[med.vsurf$varselect.interp])
names(X[med.vsurf$varselect.pred])
names(X)
str(X)[160]
out = str(X)
out
str(X[,160])
str(X[,1:15,160:166])
str(X[,c(1:15,160:166)])
str(X[,c(1:15,160:161)])
str(X[,c(1:15,160:163)])
?VSURF
med.vsurf = VSURF(x = X,y = Y,parallel = TRUE,ncores = 7,sampsize=46)
names(X[med.vsurf$varselect.pred])
names(X[med.vsurf$varselect.interp])
# med.vsurf.dtw13.dmv13 = med.vsurf #Save output for future use.
X = X[,med.vsurf$varselect.pred]
(rf.data2 = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=46))
pred = predict(rf.data2)
(conf.out = confusionMatrix(pred,Y))
(rf.data2 = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=46))
pred = predict(rf.data2)
(conf.out = confusionMatrix(pred,Y))
X
#set response variable
Y = waterlevelclusterID[[3]]
names(waterlevelclusterID)[3]
#check counts for balancing RF model
table(waterlevelclusterID[,3])
X = waterlevelclusterID[,c(7,13:24,29:80,85:155,160:180,182:183,185:188)] #remove runnoff
names(X)
(rf.data = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=46))
pred = predict(rf.data)
(conf.out = confusionMatrix(pred,Y))
med.vsurf = VSURF(x = X,y = Y,parallel = TRUE,ncores = 7,sampsize=46)
names(X[med.vsurf$varselect.interp])
names(X[med.vsurf$varselect.pred])
load("~/Documents/GitHub/waterlevels/waterlevels.RData")
names(X)
Y
(rf.data = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=46))
pred = predict(rf.data)
(conf.out = confusionMatrix(pred,Y))
med.vsurf = VSURF(x = X,y = Y,parallel = TRUE,ncores = 7,sampsize=46)
names(X[med.vsurf$varselect.pred])
names(X[med.vsurf$varselect.interp])
med.vsurf.dtw13.dmv13$varselect.pred
med.vsurf = VSURF(x = X,y = Y,parallel = TRUE,ncores = 7)
names(X[med.vsurf$varselect.interp])
names(X[med.vsurf$varselect.pred])
?randomForest
(rf.data2 = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=c(46,46,46))
(conf.out = confusionMatrix(pred,Y))
imp.out = importance(rf.data2)
X = X[order(imp.out[,1],decreasing = TRUE)]
options(device="quartz")
dev.new(width=6,height=4)
par(oma=c(1.2,.8,.2,.2),mar=c(0,0,0,0),family="Times",ps=10)
dotplot(imp.out[order(imp.out[,1],decreasing = FALSE),1],main="",xlab="Increase Mean Square Error (%)")
# ff = forestFloor(rf.fit=rf.data2,X=X,bootstrapFC = TRUE)
# ffcol=fcol(ff,cols=2)
# dev.new(width=9,height=4)
# par(oma=c(1.2,.8,.2,.2),mar=c(0,0,0,0),family="Times",ps=10,cex.axis=1.5,cex.lab=2,cex.main=1.5)
# plot(ff,orderByImportance=FALSE)
names(X)
plot.names = names(X)#c("pct evergreen (HU8)","30yr avg precip (HU12)","Precip Cluster","30yr max precip (HU8)"
,"pct evergreen (HU12)","min baseflow (HU12)","TRI (HU12)","Slope (HU12)")
(rf.data2 = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=c(46,46,46))
(conf.out = confusionMatrix(pred,Y))
imp.out = importance(rf.data2)
X = X[order(imp.out[,1],decreasing = TRUE)]
options(device="quartz")
dev.new(width=6,height=4)
par(oma=c(1.2,.8,.2,.2),mar=c(0,0,0,0),family="Times",ps=10)
dotplot(imp.out[order(imp.out[,1],decreasing = FALSE),1],main="",xlab="Increase Mean Square Error (%)")
# ff = forestFloor(rf.fit=rf.data2,X=X,bootstrapFC = TRUE)
# ffcol=fcol(ff,cols=2)
# dev.new(width=9,height=4)
# par(oma=c(1.2,.8,.2,.2),mar=c(0,0,0,0),family="Times",ps=10,cex.axis=1.5,cex.lab=2,cex.main=1.5)
# plot(ff,orderByImportance=FALSE)
names(X)
plot.names = names(X)#c("pct evergreen (HU8)","30yr avg precip (HU12)","Precip Cluster","30yr max precip (HU8)"
,"pct evergreen (HU12)","min baseflow (HU12)","TRI (HU12)","Slope (HU12)")
(rf.data2 = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=46))
(rf.data2 = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=c(46,46,46)))
(rf.data2 = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=c(46,46,46),strata=Y))
pred = predict(rf.data2)
(conf.out = confusionMatrix(pred,Y))
med.vsurf = VSURF(x = X,y = Y,parallel = TRUE,ncores = 7,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=c(46,46,46),strata=Y)
med.vsurf = VSURF(x = X,y = Y,parallel = TRUE,ncores = 7,sampsize=c(46,46,46),strata=Y)
med.vsurf = VSURF(x = X,y = Y,parallel = TRUE,ncores = 7,sampsize=c(46,46,46),strata=Y)
names(X[med.vsurf$varselect.pred])
X
names(X)
X = waterlevelclusterID[,c(7,13:24,29:80,85:155,160:180,182:183,185:188)] #remove runnoff
X = waterlevelclusterID[,c(7,13:24,29:80,85:155,160:180,182:183,185)] #remove runnoff
names(X)
(rf.data = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=c(46,46,46),strata=Y))
(rf.data = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=c(46,46,46),strata=Y))
pred = predict(rf.data)
(conf.out = confusionMatrix(pred,Y))
med.vsurf = VSURF(x = X,y = Y,parallel = TRUE,ncores = 7,sampsize=c(46,46,46),strata=Y)
names(X[med.vsurf$varselect.interp])
names(X[med.vsurf$varselect.pred])
med.vsurf = VSURF(x = X,y = Y,parallel = TRUE,ncores = 7,sampsize=c(46,46,46),strata=Y,clusterType = "FORK",keep.inbag=TRUE)
names(X[med.vsurf$varselect.interp])
names(X[med.vsurf$varselect.pred])
library(readr)
dataset <- read_csv(NULL)
View(dataset)
library(readr)
HUC_Dists <- read_csv("data/HUC_Dists.csv")
View(HUC_Dists)
waterlevelclusterID = merge(waterlevelclusterID,HUC_Dists)
X = waterlevelclusterID[,c(7,13:24,29:80,85:155,160:180,182:183,185:188)] #remove runnoff
med.vsurf = VSURF(x = X,y = Y,parallel = TRUE,ncores = 7,sampsize=c(46,46,46),strata=Y,clusterType = "FORK",keep.inbag=TRUE)
names(X[med.vsurf$varselect.pred])
names(X[med.vsurf$varselect.interp])
X
names(X)
X = waterlevelclusterID[,c(7,13:24,29:80,85:155,160:180,182:183,185)] #remove runnoff
med.vsurf = VSURF(x = X,y = Y,parallel = TRUE,ncores = 7,sampsize=c(46,46,46),strata=Y,clusterType = "FORK",keep.inbag=TRUE)
names(X[med.vsurf$varselect.interp])
names(X[med.vsurf$varselect.pred])
names(X)
med.vsurf = VSURF(x = X,y = Y,parallel = TRUE,ncores = 7,sampsize=c(46,46,46),strata=Y,clusterType = "FORK",keep.inbag=TRUE)
names(X[med.vsurf$varselect.interp])
names(X[med.vsurf$varselect.pred])
X = waterlevelclusterID[,c(7,13:24,29:80,85:155,160:180,182:183,185:188)] #remove runnoff
names(X)
med.vsurf = VSURF(x = X,y = Y,parallel = TRUE,ncores = 7,ntree = 5001,nfor.thres = 5001,nfor.interp = 5001,nfor.pred = 5001,clusterType = "FORK",sampsize=c(46,46,46),strata=Y,keep.inbag=TRUE)
summary(med.vsurf)
names(X[med.vsurf$varselect.interp])
names(X[med.vsurf$varselect.pred])
save.image("~/Documents/GitHub/waterlevels/waterlevels.RData")
# med.vsurf.dtw13.dmv13 = med.vsurf #Save output for future use.
X = X[,med.vsurf$varselect.pred]
(rf.data2 = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=c(46,46,46),strata=Y))
pred = predict(rf.data2)
(conf.out = confusionMatrix(pred,Y))
imp.out = importance(rf.data2)
X = X[order(imp.out[,1],decreasing = TRUE)]
options(device="quartz")
dev.new(width=6,height=4)
par(oma=c(1.2,.8,.2,.2),mar=c(0,0,0,0),family="Times",ps=10)
dotplot(imp.out[order(imp.out[,1],decreasing = FALSE),1],main="",xlab="Increase Mean Square Error (%)")
names(X)
plot.names = names(X)#c("pct evergreen (HU8)","30yr avg precip (HU12)","Precip Cluster","30yr max precip (HU8)"
par(mfrow=c(1,3),oma=c(0,0,0,0),mar=c(3,3,.2,.2),family="Times",ps=10,cex.axis=1,cex.lab=2,cex.main=1.5)
for(i in 1:ncol(X)){
out1 = partialPlot(x = rf.data2,pred.data = X,x.var = names(X)[i],which.class = 1,plot=FALSE)
out2 = partialPlot(x = rf.data2,pred.data = X,x.var = names(X)[i],which.class = 2,plot=FALSE)
out3 = partialPlot(x = rf.data2,pred.data = X,x.var = names(X)[i],which.class = 3,plot=FALSE)
yrange = range(out1$y,out2$y,out3$y)
plot(out1,col=1,type="l",ylim=yrange,xlab="",ylab="")
mtext(side=1,plot.names[i],line=1.8)
if(i==1 | i==5) mtext(side=2,"Relative logit contribution",line=1.8)
lines(out2,col=2,type="l")
lines(out3,col=3,type="l")
}
table(Y)
imp.out
?importance
summary(rf.data2)
rf.data2$importance
dotplot(imp.out[order(imp.out[,1],decreasing = FALSE),1],main="",xlab="Increase Mean Square Error (%)")
varImpPlot(rf.data2)
varImpPlot(rf.data2)
imp.out = importance(rf.data2,type=1)
imp.out
rf.data2$importance
imp.out = importance(rf.data2,type=1)
imp.out
rf.data2$confusion
rf.data2$importance
rf.data2$importance[1]
rf.data2$importance[3]
rf.data2$importance[6]
rf.data2$importance[9]
rf.data2$importance[,3]
rf.data2$importance[,5]
rf.data2$importance[,4]
plot(rf.data2$importance[,4])
dotplot(rf.data2$importance[,4])
imp.out = importance(rf.data2,type=1,scale=FALSE)
X = X[order(imp.out[,1],decreasing = TRUE)]
options(device="quartz")
dev.new(width=6,height=4)
par(oma=c(1.2,.8,.2,.2),mar=c(0,0,0,0),family="Times",ps=10)
dotplot(imp.out[order(imp.out[,1],decreasing = FALSE),1],main="",xlab="Increase Mean Square Error (%)")
dotplot(imp.out[order(imp.out[,1],decreasing = FALSE),1]*100,main="",xlab="Increase Mean Square Error (%)")
dotplot(imp.out[order(imp.out[,1],decreasing = FALSE),1]*100,main="",xlab="Mean Decrease Accuracy (%)")
names(imp.out)
imp.out
imp.out[1]
(imp.out = importance(rf.data2,type=1,scale=FALSE))
good.anmes = c("Evergreen Forest (HU8,%)","Precipitation Cluster","Mean Annual Precip (30yr avg)")
attributes(imp.out)$dimnames[[1]] = good.anmes
dotplot(imp.out[order(imp.out[,1],decreasing = FALSE),1]*100,main="",xlab="Mean Decrease Accuracy (%)")
plot.names = c("Evergreen Forest (HU8,%)","Precipitation Cluster","Mean Annual Precip (30yr avg)")
dev.new(width=8,height=2)
par(mfrow=c(1,3),oma=c(0,0,0,0),mar=c(3,3,.2,.2),family="Times",ps=10,cex.axis=1,cex.lab=2,cex.main=1.5)
for(i in 1:ncol(X)){
out1 = partialPlot(x = rf.data2,pred.data = X,x.var = names(X)[i],which.class = 1,plot=FALSE)
out2 = partialPlot(x = rf.data2,pred.data = X,x.var = names(X)[i],which.class = 2,plot=FALSE)
out3 = partialPlot(x = rf.data2,pred.data = X,x.var = names(X)[i],which.class = 3,plot=FALSE)
yrange = range(out1$y,out2$y,out3$y)
plot(out1,col=1,type="l",ylim=yrange,xlab="",ylab="")
mtext(side=1,plot.names[i],line=1.8)
if(i==1 | i==5) mtext(side=2,"Relative logit contribution",line=1.8)
lines(out2,col=2,type="l")
lines(out3,col=3,type="l")
}
X
X = X[order(imp.out[,1],decreasing = TRUE)]
X
order(imp.out[,1],decreasing = TRUE)
imp.out
X = X[,c(2,1,3)#X[order(imp.out[,1],decreasing = TRUE)]
)
X = X[,c(2,1,3)]#X[order(imp.out[,1],decreasing = TRUE)]
X
plot.names = c("Evergreen Forest (HU8,%)","Precipitation Cluster","Mean Annual Precip (30yr avg)")
dev.new(width=8,height=2)
par(mfrow=c(1,3),oma=c(0,0,0,0),mar=c(3,3,.2,.2),family="Times",ps=10,cex.axis=1,cex.lab=2,cex.main=1.5)
for(i in 1:ncol(X)){
out1 = partialPlot(x = rf.data2,pred.data = X,x.var = names(X)[i],which.class = 1,plot=FALSE)
out2 = partialPlot(x = rf.data2,pred.data = X,x.var = names(X)[i],which.class = 2,plot=FALSE)
out3 = partialPlot(x = rf.data2,pred.data = X,x.var = names(X)[i],which.class = 3,plot=FALSE)
yrange = range(out1$y,out2$y,out3$y)
plot(out1,col=1,type="l",ylim=yrange,xlab="",ylab="")
mtext(side=1,plot.names[i],line=1.8)
if(i==1 | i==5) mtext(side=2,"Relative logit contribution",line=1.8)
lines(out2,col=2,type="l")
lines(out3,col=3,type="l")
}
dev.new(width=8,height=2)
par(mfrow=c(1,3),oma=c(0,0,0,0),mar=c(3,3,.2,.2),family="Times",ps=10,cex.axis=1,cex.lab=2,cex.main=1.5)
for(i in 1:ncol(X)){
out1 = partialPlot(x = rf.data2,pred.data = X,x.var = names(X)[i],which.class = 1,plot=FALSE)
out2 = partialPlot(x = rf.data2,pred.data = X,x.var = names(X)[i],which.class = 2,plot=FALSE)
out3 = partialPlot(x = rf.data2,pred.data = X,x.var = names(X)[i],which.class = 3,plot=FALSE)
yrange = range(out1$y,out2$y,out3$y)
plot(out1,col=1,type="l",ylim=yrange,xlab="",ylab="",lwd=2)
mtext(side=1,plot.names[i],line=1.8)
if(i==1 | i==5) mtext(side=2,"Impact on Class Probability",line=1.8)
lines(out2,col=2,type="l",lwd=2)
lines(out3,col=3,type="l",lwd=2)
}
map.regions = c('wisconsin')
dev.new(width=5,height=5)
map('state',region=map.regions,col=grey(.98),fill=TRUE,resolution = 0,mar=c(0,0,0,0),border=grey(.5),lty=5, main="Water Level Clusters")
points(waterlevelclusterID$Longitude,waterlevelclusterID$Latitude,col=alpha(as.numeric(waterlevelclusterID$clusterid_dtw1_3),.7),pch=16)
legend("topright",legend=c(1:3),pch=16,col=c(1:3),title = "Cluster ID",bty="n")
cluster.plot.color = rep(NA,167)
cluster.plot.color[which(waterlevelclusterID$cmdv_clusterid3==3)]=1
cluster.plot.color[which(waterlevelclusterID$cmdv_clusterid3==1)]=2
cluster.plot.color[which(waterlevelclusterID$cmdv_clusterid3==2)]=3
cluster.plot.color
map.regions = c('wisconsin')
dev.new(width=5,height=5)
map('state',region=map.regions,col=grey(.98),fill=TRUE,resolution = 0,mar=c(0,0,0,0),border=grey(.5),lty=5, main="Water Level Clusters")
points(waterlevelclusterID$Longitude,waterlevelclusterID$Latitude,col=alpha(as.numeric(cluster.plot.color),.7),pch=16)
legend("topright",legend=c(1:3),pch=16,col=c(1:3),title = "Cluster ID",bty="n")
map.regions = c('wisconsin')
dev.new(width=5,height=5)
map('state',region=map.regions,col=grey(.98),fill=TRUE,resolution = 0,mar=c(0,0,0,0),border=grey(.5),lty=5, main="Water Level Clusters")
cluster.plot.color = rep(NA,167)
cluster.plot.color[which(waterlevelclusterID$cmdv_clusterid3==3)]=1
cluster.plot.color[which(waterlevelclusterID$cmdv_clusterid3==1)]=2
cluster.plot.color[which(waterlevelclusterID$cmdv_clusterid3==2)]=3
points(waterlevelclusterID$Longitude,waterlevelclusterID$Latitude,col=alpha(as.numeric(cluster.plot.color),.7),pch=16)
legend("topright",legend=c(1:3),pch=16,col=c(2,3,1),title = "Cluster ID",bty="n")
dev.new(width=4,height=4)
par(oma=c(3,3,.2,.2),mar=c(0,0,0,0),family="Times",ps=10)
par(oma=c(3,3,.2,.2),mar=c(0,0,0,0),family="Times",ps=10)
boxplot(waterlevelclusterID$hu8_nlcd2006_pct_42~waterlevelclusterID$clusterid_dtw1_3,xlab="",ylab="")
mtext(side=1,line=2,"Cluster ID",cex=1.25)
mtext(side=2,line=2,"Evergreen Forest (HU8,%)",cex=1.25)
boxplot(waterlevelclusterID$hu12_prism_ppt_30yr_normal_800mm2_annual_mean~waterlevelclusterID$clusterid_dtw1_3,xlab="",ylab="")
dev.new(width=4,height=4)
par(oma=c(3,3,.2,.2),mar=c(0,0,0,0),family="Times",ps=10)
boxplot(waterlevelclusterID$hu12_prism_ppt_30yr_normal_800mm2_annual_mean~waterlevelclusterID$clusterid_dtw1_3,xlab="",ylab="")
mtext(side=1,line=2,"Cluster ID",cex=1.25)
mtext(side=2,line=2,"Annual Precip (30yr avg)",cex=1.25)
dev.new(width=4,height=4)
par(oma=c(3,3,.2,.2),mar=c(0,0,0,0),family="Times",ps=10)
boxplot(waterlevelclusterID$hu12_prism_ppt_30yr_normal_800mm2_annual_mean~waterlevelclusterID$clusterid_dtw1_3,xlab="",ylab="")
mtext(side=1,line=2,"Cluster ID",cex=1.25)
mtext(side=2,line=2,"Annual Precip (30yr avg,mm)",cex=1.25)
med.vsurf.dtw13.dmv13 = med.vsurf #Save output for future use.
X = waterlevelclusterID[,c(7,13:24,29:80,85:155,160:180,182:183,185:188)] #remove runnoff
X2 = waterlevelclusterID[which(waterlevelclusterID$clusterid_dtw1_3!=1),c(7,13:24,29:80,85:155,160:180,182:183,185:188)]
##############
##############
##############
# Run models without cluster 1 (southern WI)
Y = waterlevelclusterID[[3]][which(waterlevelclusterID$clusterid_dtw1_3!=1)]
table(Y)
(rf.data = randomForest(y = Y,x = X2,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=c(46,46,46),strata=Y))
Y = as.factor(Y)
Y
Y = as.factor(as.numeric(Y))
Y
table(Y)
(rf.data = randomForest(y = Y,x = X2,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=c(46,46,46),strata=Y))
(rf.data = randomForest(y = Y,x = X2,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=c(46,46),strata=Y))
pred = predict(rf.data)
(conf.out = confusionMatrix(pred,Y))
rf.data$importance
varImpPlot(rf.data,scale=FALSE,type=1)
med.vsurf = VSURF(x = X2,y = Y,parallel = TRUE,ncores = 7,sampsize=c(46,46),strata=Y,clusterType = "FORK",keep.inbag=TRUE)
names(X2[med.vsurf$varselect.interp])
names(X2[med.vsurf$varselect.pred])
##############
##############
##############
# Run models without cluster 1 (southern WI)
Y2 = waterlevelclusterID[[3]][which(waterlevelclusterID$clusterid_dtw1_3!=1)]
Y2 = as.factor(as.numeric(Y))
X = X2[,med.vsurf$varselect.pred]
(rf.data2 = randomForest(y = Y2,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=c(46,46,46),strata=Y))
(rf.data2 = randomForest(y = Y2,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=c(46,46),strata=Y))
pred = predict(rf.data2)
(conf.out = confusionMatrix(pred,Y2))
varImpPlot(rf.data2,scale=FALSE,type=1)
names(X)
X2 = X2[,med.vsurf$varselect.pred]
names(X2)
plot.names = names(X2)#c("Evergreen Forest (HU8,%)","Precipitation Cluster","Mean Annual Precip (30yr avg)")
dev.new(width=6,height=4)
dev.new(width=6,height=4)
par(mfrow=c(2,2),oma=c(0,0,0,0),mar=c(3,3,.2,.2),family="Times",ps=10,cex.axis=1,cex.lab=2,cex.main=1.5)
for(i in 1:ncol(X2)){
out1 = partialPlot(x = rf.data2,pred.data = X2,x.var = names(X2)[i],which.class = 1,plot=FALSE)
out2 = partialPlot(x = rf.data2,pred.data = X2,x.var = names(X2)[i],which.class = 2,plot=FALSE)
out3 = partialPlot(x = rf.data2,pred.data = X2,x.var = names(X2)[i],which.class = 3,plot=FALSE)
yrange = range(out1$y,out2$y,out3$y)
plot(out1,col=1,type="l",ylim=yrange,xlab="",ylab="",lwd=2)
mtext(side=1,plot.names[i],line=1.8)
if(i==1 | i==5) mtext(side=2,"Impact on Class Probability",line=1.8)
lines(out2,col=2,type="l",lwd=2)
lines(out3,col=3,type="l",lwd=2)
}
par(mfrow=c(2,2),oma=c(0,0,0,0),mar=c(3,3,.2,.2),family="Times",ps=10,cex.axis=1,cex.lab=2,cex.main=1.5)
for(i in 1:ncol(X2)){
out1 = partialPlot(x = rf.data2,pred.data = X2,x.var = names(X2)[i],which.class = 1,plot=FALSE)
out2 = partialPlot(x = rf.data2,pred.data = X2,x.var = names(X2)[i],which.class = 2,plot=FALSE)
# out3 = partialPlot(x = rf.data2,pred.data = X2,x.var = names(X2)[i],which.class = 3,plot=FALSE)
yrange = range(out1$y,out2$y,out3$y)
plot(out1,col=1,type="l",ylim=yrange,xlab="",ylab="",lwd=2)
mtext(side=1,plot.names[i],line=1.8)
if(i==1 | i==5) mtext(side=2,"Impact on Class Probability",line=1.8)
lines(out2,col=2,type="l",lwd=2)
lines(out3,col=3,type="l",lwd=2)
}
dev.new(width=6,height=4)
par(mfrow=c(2,2),oma=c(0,0,0,0),mar=c(3,3,.2,.2),family="Times",ps=10,cex.axis=1,cex.lab=2,cex.main=1.5)
for(i in 1:ncol(X2)){
# out1 = partialPlot(x = rf.data2,pred.data = X2,x.var = names(X2)[i],which.class = 1,plot=FALSE)
out2 = partialPlot(x = rf.data2,pred.data = X2,x.var = names(X2)[i],which.class = 2,plot=FALSE)
out3 = partialPlot(x = rf.data2,pred.data = X2,x.var = names(X2)[i],which.class = 3,plot=FALSE)
yrange = range(out2$y,out3$y)
plot(out1,col=1,type="l",ylim=yrange,xlab="",ylab="",lwd=2)
mtext(side=1,plot.names[i],line=1.8)
if(i==1 | i==5) mtext(side=2,"Impact on Class Probability",line=1.8)
lines(out2,col=2,type="l",lwd=2)
lines(out3,col=3,type="l",lwd=2)
}
##############
##############
##############
# Run models without cluster 1 (southern WI)
Y2 = waterlevelclusterID[[3]][which(waterlevelclusterID$clusterid_dtw1_3!=1)]
Y2
Y2 = as.factor(as.numeric(Y))
Y2
plot.names = names(X2)#c("Evergreen Forest (HU8,%)","Precipitation Cluster","Mean Annual Precip (30yr avg)")
dev.new(width=6,height=4)
par(mfrow=c(2,2),oma=c(0,0,0,0),mar=c(3,3,.2,.2),family="Times",ps=10,cex.axis=1,cex.lab=2,cex.main=1.5)
for(i in 1:ncol(X2)){
out1 = partialPlot(x = rf.data2,pred.data = X2,x.var = names(X2)[i],which.class = 1,plot=FALSE)
out2 = partialPlot(x = rf.data2,pred.data = X2,x.var = names(X2)[i],which.class = 2,plot=FALSE)
# out3 = partialPlot(x = rf.data2,pred.data = X2,x.var = names(X2)[i],which.class = 3,plot=FALSE)
yrange = range(out1$y,out2$y)
plot(out1,col=1,type="l",ylim=yrange,xlab="",ylab="",lwd=2)
mtext(side=1,plot.names[i],line=1.8)
if(i==1 | i==5) mtext(side=2,"Impact on Class Probability",line=1.8)
lines(out2,col=2,type="l",lwd=2)
# lines(out3,col=3,type="l",lwd=2)
}
par(mfrow=c(2,3),oma=c(0,0,0,0),mar=c(3,3,.2,.2),family="Times",ps=10,cex.axis=1,cex.lab=2,cex.main=1.5)
for(i in 1:ncol(X2)){
out1 = partialPlot(x = rf.data2,pred.data = X2,x.var = names(X2)[i],which.class = 1,plot=FALSE)
out2 = partialPlot(x = rf.data2,pred.data = X2,x.var = names(X2)[i],which.class = 2,plot=FALSE)
# out3 = partialPlot(x = rf.data2,pred.data = X2,x.var = names(X2)[i],which.class = 3,plot=FALSE)
yrange = range(out1$y,out2$y)
plot(out1,col=1,type="l",ylim=yrange,xlab="",ylab="",lwd=2)
mtext(side=1,plot.names[i],line=1.8)
if(i==1 | i==5) mtext(side=2,"Impact on Class Probability",line=1.8)
lines(out2,col=2,type="l",lwd=2)
# lines(out3,col=3,type="l",lwd=2)
}
write.table(waterlevelclusterID,"data\waterlevelclusterID.csv",sep=",",row.names=FALSE)
write.table(waterlevelclusterID,"data/waterlevelclusterID.csv",sep=",",row.names=FALSE)
library(readr)
dataset <- read_csv("data/waterlevelclusterID_wo_lterwells.csv")
View(dataset)
factor.cols = c(3:7,10:12,184,185)
#assigning factor to correct variables
dataset = as.data.frame(dataset)
factor.cols = c(3:7,10:12,184,185)
dataset = as.data.frame(dataset)
for(i in 1:length(factor.cols)){
datasetD[,factor.cols[i]] = as.factor(dataset[,factor.cols[i]])
}
dataset = as.data.frame(dataset)
for(i in 1:length(factor.cols)){
dataset[,factor.cols[i]] = as.factor(dataset[,factor.cols[i]])
}
Y = dataset[[3]]
names(dataset)[3]
#check counts for balancing RF model
table(Y)
X = dataset[,c(7,13:24,29:80,85:155,160:180,182:183,185:188)] #remove runnoff
names(X)
(rf.data = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=c(27,27,27),strata=Y))
pred = predict(rf.data)
(conf.out = confusionMatrix(pred,Y))
med.vsurf = VSURF(x = X,y = Y,parallel = TRUE,ncores = 7,sampsize=c(27,27,27),strata=Y,clusterType = "FORK",keep.inbag=TRUE)
names(X[med.vsurf$varselect.interp])
names(X[med.vsurf$varselect.pred])
# med.vsurf.dtw13.dmv13 = med.vsurf #Save output for future use 4.5 run time.
X = X[,med.vsurf$varselect.pred]
(rf.data2 = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=c(27,27,27),strata=Y))
pred = predict(rf.data2)
(conf.out = confusionMatrix(pred,Y))
(imp.out = importance(rf.data2,type=1,scale=FALSE))
dev.new(width=6,height=4)
par(oma=c(1.2,.8,.2,.2),mar=c(0,0,0,0),family="Times",ps=10)
good.anmes = names(X)#c("Evergreen Forest (HU8,%)","Precipitation Cluster","Mean Annual Precip (30yr avg)")
attributes(imp.out)$dimnames[[1]] = good.anmes
dotplot(imp.out[order(imp.out[,1],decreasing = FALSE),1]*100,main="",xlab="Mean Decrease Accuracy (%)")
plot.names = names(X)#c("Evergreen Forest (HU8,%)","Precipitation Cluster","Mean Annual Precip (30yr avg)")
dev.new(width=8,height=2)
par(mfrow=c(1,3),oma=c(0,0,0,0),mar=c(3,3,.2,.2),family="Times",ps=10,cex.axis=1,cex.lab=2,cex.main=1.5)
for(i in 1:ncol(X)){
out1 = partialPlot(x = rf.data2,pred.data = X,x.var = names(X)[i],which.class = 1,plot=FALSE)
out2 = partialPlot(x = rf.data2,pred.data = X,x.var = names(X)[i],which.class = 2,plot=FALSE)
out3 = partialPlot(x = rf.data2,pred.data = X,x.var = names(X)[i],which.class = 3,plot=FALSE)
yrange = range(out1$y,out2$y,out3$y)
plot(out1,col=1,type="l",ylim=yrange,xlab="",ylab="",lwd=2)
mtext(side=1,plot.names[i],line=1.8)
if(i==1 | i==5) mtext(side=2,"Impact on Class Probability",line=1.8)
lines(out2,col=2,type="l",lwd=2)
lines(out3,col=3,type="l",lwd=2)
}
dev.new(width=8,height=4)
par(mfrow=c(2,4),oma=c(0,0,0,0),mar=c(3,3,.2,.2),family="Times",ps=10,cex.axis=1,cex.lab=2,cex.main=1.5)
for(i in 1:ncol(X)){
out1 = partialPlot(x = rf.data2,pred.data = X,x.var = names(X)[i],which.class = 1,plot=FALSE)
out2 = partialPlot(x = rf.data2,pred.data = X,x.var = names(X)[i],which.class = 2,plot=FALSE)
out3 = partialPlot(x = rf.data2,pred.data = X,x.var = names(X)[i],which.class = 3,plot=FALSE)
yrange = range(out1$y,out2$y,out3$y)
plot(out1,col=1,type="l",ylim=yrange,xlab="",ylab="",lwd=2)
mtext(side=1,plot.names[i],line=1.8)
if(i==1 | i==5) mtext(side=2,"Impact on Class Probability",line=1.8)
lines(out2,col=2,type="l",lwd=2)
lines(out3,col=3,type="l",lwd=2)
}
