params <- jags.samples(out,c("mu.beta"),7500)
recompile(out)
params <- jags.samples(out,c("mu.beta"),7500)
params <- jags.samples(out,c("mu.alpha","mu.beta","BB","sigma", "sigma.a", "sigma.b","rho"),7500)
params <- jags.samples(out,c("mu.alpha","mu.beta","BB","sigma", "sigma.a", "sigma.b","rho"),7500)
str(out)
out$BUGSoutput$sims.list$mu.beta
sims.list = out$BUGSoutput$sims.list$mu.beta
quantile(x = sims.list,probs = c(0.025,0.975))
mean(sims.list)
str(out)
quantile(x = sims.list,probs = c(0.025,0.975))
dat = dat %>% mutate(W_LA_Ratio = WatershedA/Area) %>% mutate(slope2 = NA)
dat$slope2[which(dat$slope<1.0129)] = 0
dat$slope2[which(dat$slope>1.2989)] = 2
dat$slope2[which(is.na(dat$slope2))] = 1
View(dat)
model.data = dat %>% select(Area,WatershedA,MaxDepth,W_DARCY,W_LA_Ratio,slope2)#choose which dataset to use so code works without editing further down
names(model.data)
factor.cols = c(6)
#assigning factor to correct variables
model.data = as.data.frame(model.data)
for(i in 1:length(factor.cols)){
model.data[,factor.cols[i]] = as.factor(model.data[,factor.cols[i]])
}
#set response variable
Y.col = 6
Y = model.data[[Y.col]]
names(model.data)[Y.col]
#check counts for balancing RF model
table(Y)
(rf.data = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=c(57,57,57),strata = Y))
X = model.data[,c(1:5)]
names(X)
(rf.data = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=c(57,57,57),strata = Y))
pred = predict(rf.data)
(conf.out = confusionMatrix(pred,Y))
dat
model.data = dat #choose which dataset to use so code works without editing further down
names(model.data)
factor.cols = c(38,44)
#assigning factor to correct variables
model.data = as.data.frame(model.data)
for(i in 1:length(factor.cols)){
model.data[,factor.cols[i]] = as.factor(model.data[,factor.cols[i]])
}
#set response variable
Y.col = 39
Y = model.data[[Y.col]]
names(model.data)[Y.col]
#check counts for balancing RF model
table(Y)
names(model.data)
X = model.data[,c(4:8,11,38,42,43)]
names(X)
(rf.data = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001)
(rf.data = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001))
X = model.data[,c(4:38,42,43)]
names(X)
(rf.data = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001))
hist(model.data$mape)
model.data = dat %>% filter(n.points>=6)#choose which dataset to use so code works without editing further down
model.data = dat %>% filter(n.points>=6)#choose which dataset to use so code works without editing further down
names(model.data)
factor.cols = c(38,44)
#assigning factor to correct variables
model.data = as.data.frame(model.data)
for(i in 1:length(factor.cols)){
model.data[,factor.cols[i]] = as.factor(model.data[,factor.cols[i]])
}
##########Random Forest Modeling
#set response variable
Y.col = 39
Y = model.data[[Y.col]]
names(model.data)[Y.col]
#check counts for balancing RF model
table(Y)
X = model.data[,c(4:38,42,43)]
names(X)
(rf.data = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001))
model.data = dat #choose which dataset to use so code works without editing further down
names(model.data)
hist(dat$sd.slope)
hist(1/dat$sd.slope)
dat$sd.slope
1/.19
1/1.19
1/0.03
model.data = dat #choose which dataset to use so code works without editing further down
names(model.data)
factor.cols = c(38,44)
#assigning factor to correct variables
model.data = as.data.frame(model.data)
for(i in 1:length(factor.cols)){
model.data[,factor.cols[i]] = as.factor(model.data[,factor.cols[i]])
}
##########Random Forest Modeling
#set response variable
Y.col = 39
Y = model.data[[Y.col]]
names(model.data)[Y.col]
#check counts for balancing RF model
table(Y)
X = model.data[,c(4:38,42,43)]
names(X)
(rf.data = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001))
str(out)
library(devtools)
install_github(repo='jagstools', username='johnbaums')
library(jagstools)
jagsresults(x = out,params = "BB")
jagsresults(x = out,params = "mu.b")
jagsresults(x = out,params = "mu.beta")
params.out jagsresults(x = out,params = "BB")
params.out = jagsresults(x = out,params = "BB")
466*2
params.out[c(467:932),]
View(regressionstats)
regressionstats$ll = params.out[c(467:932),3]
View(regressionstats)
regressionstats$slope2[which(regressionstats$ll>0)] = 0
regressionstats$slope2= NA
regressionstats$slope2[which(regressionstats$ll>0)] = 0
View(regressionstats)
regressionstats$slope2[which(regressionstats$ll<0)] = 0
regressionstats$slope2[which(regressionstats$ll>0)] = 1
View(regressionstats)
table(regressionstats$slope2)
dat = EcoContext %>% left_join(regressionstats) %>% select(-ID,-OBJECTID,-WATERBODY_NAME,-HYDROID,-HYDROCODE,
-HYDROTYPE,-LANDLOCK_C,-WBIC,-SHAPE_AREA,-SHAPE_LEN,
-County,-MeanDepth,-problem,-hydro24k,-centroid_x,
-centroid_y,-NATURAL_COMMUNITY,-Lake_type,-HYDROLOGY,
-`Katie classification`,-`Katie notes`) %>% drop_na()
summary(dat)
dat = dat %>% select(-W_BD_201,-W_BD_204,-W_BD_205,-W_BD_206,-W_BD_207,-W_BD_208,-W_BD_209,-W_BD_210,-W_BD_MISSI,
-W_BR_2,-W_BR_3,-W_BR_MISSI,-W_QG_3,-W_QG_4,-W_QG_6,-W_QG_7,-W_QG_8,-W_QG_9,-W_QG_10,
-W_QG_11,-W_QG_12,-W_QG_13,-W_QG_14,-W_QG_15,-W_QG_16,-W_QG_17,-W_QG_18,-W_QG_20,
-W_QG_21,-W_QG_22,-W_QG_24,-W_QG_29,-W_QG_99,-W_QG_MISSI,-W_LU06_23,-W_LU06_24,-W_LU06_31)
dat = dat %>% select(everything(),-contains("LU11"))
summary(dat)
dat = dat %>% mutate(W_LA_Ratio = WatershedA/Area) %>% mutate(slope2 = NA)
model.data = dat #choose which dataset to use so code works without editing further down
names(model.data)
factor.cols = c(38,44)
#assigning factor to correct variables
model.data = as.data.frame(model.data)
for(i in 1:length(factor.cols)){
model.data[,factor.cols[i]] = as.factor(model.data[,factor.cols[i]])
}
#set response variable
Y.col = 44
Y = model.data[[Y.col]]
names(model.data)[Y.col]
#check counts for balancing RF model
table(Y)
Y
dat = EcoContext %>% left_join(regressionstats) %>% select(-ID,-OBJECTID,-WATERBODY_NAME,-HYDROID,-HYDROCODE,
-HYDROTYPE,-LANDLOCK_C,-WBIC,-SHAPE_AREA,-SHAPE_LEN,
-County,-MeanDepth,-problem,-hydro24k,-centroid_x,
-centroid_y,-NATURAL_COMMUNITY,-Lake_type,-HYDROLOGY,
-`Katie classification`,-`Katie notes`) %>% drop_na()
summary(dat)
dat = dat %>% select(-W_BD_201,-W_BD_204,-W_BD_205,-W_BD_206,-W_BD_207,-W_BD_208,-W_BD_209,-W_BD_210,-W_BD_MISSI,
-W_BR_2,-W_BR_3,-W_BR_MISSI,-W_QG_3,-W_QG_4,-W_QG_6,-W_QG_7,-W_QG_8,-W_QG_9,-W_QG_10,
-W_QG_11,-W_QG_12,-W_QG_13,-W_QG_14,-W_QG_15,-W_QG_16,-W_QG_17,-W_QG_18,-W_QG_20,
-W_QG_21,-W_QG_22,-W_QG_24,-W_QG_29,-W_QG_99,-W_QG_MISSI,-W_LU06_23,-W_LU06_24,-W_LU06_31)
dat = dat %>% select(everything(),-contains("LU11"))
summary(dat)
dat = dat %>% mutate(W_LA_Ratio = WatershedA/Area) %>% mutate(slope2 = NA)
dat = EcoContext %>% left_join(regressionstats) %>% select(-ID,-OBJECTID,-WATERBODY_NAME,-HYDROID,-HYDROCODE,
-HYDROTYPE,-LANDLOCK_C,-WBIC,-SHAPE_AREA,-SHAPE_LEN,
-County,-MeanDepth,-problem,-hydro24k,-centroid_x,
-centroid_y,-NATURAL_COMMUNITY,-Lake_type,-HYDROLOGY,
-`Katie classification`,-`Katie notes`) %>% drop_na()
summary(dat)
dat = dat %>% select(-W_BD_201,-W_BD_204,-W_BD_205,-W_BD_206,-W_BD_207,-W_BD_208,-W_BD_209,-W_BD_210,-W_BD_MISSI,
-W_BR_2,-W_BR_3,-W_BR_MISSI,-W_QG_3,-W_QG_4,-W_QG_6,-W_QG_7,-W_QG_8,-W_QG_9,-W_QG_10,
-W_QG_11,-W_QG_12,-W_QG_13,-W_QG_14,-W_QG_15,-W_QG_16,-W_QG_17,-W_QG_18,-W_QG_20,
-W_QG_21,-W_QG_22,-W_QG_24,-W_QG_29,-W_QG_99,-W_QG_MISSI,-W_LU06_23,-W_LU06_24,-W_LU06_31)
dat = dat %>% select(everything(),-contains("LU11"))
summary(dat)
dat = dat %>% mutate(W_LA_Ratio = WatershedA/Area)
model.data = dat #choose which dataset to use so code works without editing further down
names(model.data)
factor.cols = c(38,44)
#assigning factor to correct variables
model.data = as.data.frame(model.data)
for(i in 1:length(factor.cols)){
model.data[,factor.cols[i]] = as.factor(model.data[,factor.cols[i]])
}
##########Random Forest Modeling
#set response variable
Y.col = 44
Y = model.data[[Y.col]]
names(model.data)[Y.col]
#check counts for balancing RF model
table(Y)
X = model.data[,c(4:38,45)]
names(X)
(rf.data = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize = c(208,208)))
pred = predict(rf.data)
(conf.out = confusionMatrix(pred,Y))
med.vsurf = VSURF(x = X,y = Y,parallel = TRUE,ncores = 7,ntree = 5001,nfor.thres = 5001,nfor.interp = 5001,nfor.pred = 5001,clusterType = "FORK",sampsize=rep(min(table(Y)),nlevels(Y)),strata=Y)
names(X[med.vsurf$varselect.pred])
names(X)
# med.vsurf.dtw13.dmv13 = med.vsurf #Save output for future use 4.5 run time.
X = X[,med.vsurf$varselect.pred]
(rf.data2 = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=rep(min(table(Y)),nlevels(Y)),strata=Y))
library(readr)
lagoscrosswalk <- read_csv("RFModels/lagoscrosswalk.csv")
View(lagoscrosswalk)
lagoscrosswalk = lagoscrosswalk %>% select(WiscID,lagoslakeid)
dat = regressionstats %>% left_join(lagoscrosswalk)
View(dat)
dat = regressionstats %>% right_join(lagoscrosswalk)
dat = regressionstats %>% left_join(lagoscrosswalk)
dat = regressionstats %>% left_join(lagoscrosswalk) %>% drop_na(lagoslakeid)
library(LAGOSNE)
dt <- lagosne_load(version = "1.087.1")
str(dt)
names(dt)
dt.lakes.geo = dt$lakes.geo
names(dt.lakes.geo)
rm(dt.lakes.geo)
dt.lakes= dt$lakes_limno
names(dt.lakes)
dat = regressionstats %>% left_join(lagoscrosswalk) %>% drop_na(lagoslakeid) %>% left_join(select(dt$lakes_limno,lagoslakeid,maxdepth))
select(dt$lakes_limno,lagoslakeid,maxdepth)
View(dat)
rm(dt.lakes)
names(dt$buffer500m.lulc)
dat = regressionstats %>% left_join(lagoscrosswalk) %>% drop_na(lagoslakeid) %>% left_join(select(dt$lakes_limno,lagoslakeid,maxdepth)) %>%
left_join(dt$buffer500m.lulc) %>% select(everything(),-contains("nlcd2001"),-contains("nlcd1992"),-contains("nlcd2006")) %>%
dat = EcoContext %>% left_join(regressionstats) %>% select(-ID,-OBJECTID,-WATERBODY_NAME,-HYDROID,-HYDROCODE,
-HYDROTYPE,-LANDLOCK_C,-WBIC,-SHAPE_AREA,-SHAPE_LEN,
-County,-MeanDepth,-problem,-hydro24k,-centroid_x,
-centroid_y,-NATURAL_COMMUNITY,-Lake_type,-HYDROLOGY,
-`Katie classification`,-`Katie notes`) %>% drop_na()
dat = regressionstats %>% left_join(lagoscrosswalk) %>% drop_na(lagoslakeid) %>% left_join(select(dt$lakes_limno,lagoslakeid,maxdepth)) %>%
left_join(dt$buffer500m.lulc) %>% select(everything(),-contains("nlcd2001"),-contains("nlcd1992"),-contains("nlcd2006"))
View(dat)
names(dat)
names(dt$locus)
dat = regressionstats %>% left_join(lagoscrosswalk) %>% drop_na(lagoslakeid) %>% left_join(select(dt$lakes_limno,lagoslakeid,maxdepth)) %>%
left_join(dt$buffer500m.lulc) %>% select(everything(),-contains("nlcd2001"),-contains("nlcd1992"),-contains("nlcd2006")) %>%
left_join(select(dt$locus,lagoslakeide,lake_area_ha,lake_perim_meters,elevation_m))
dat = regressionstats %>% left_join(lagoscrosswalk) %>% drop_na(lagoslakeid) %>% left_join(select(dt$lakes_limno,lagoslakeid,maxdepth)) %>%
left_join(dt$buffer500m.lulc) %>% select(everything(),-contains("nlcd2001"),-contains("nlcd1992"),-contains("nlcd2006")) %>%
left_join(select(dt$locus,lagoslakeid,lake_area_ha,lake_perim_meters,elevation_m))
View(dat)
View(dat)
dat = regressionstats %>% left_join(lagoscrosswalk) %>% drop_na(lagoslakeid) %>% left_join(select(dt$lakes_limno,lagoslakeid,maxdepth)) %>%
left_join(dt$buffer500m.lulc) %>% select(everything(),-contains("nlcd2001"),-contains("nlcd1992"),-contains("nlcd2006")) %>%
left_join(select(dt$locus,lagoslakeid,lake_area_ha,lake_perim_meters,elevation_m)) %>% drop_na(buffer500m_nhdid)
View(dat)
names(dat)
names(dt$iws)
dat = regressionstats %>% left_join(lagoscrosswalk) %>% drop_na(lagoslakeid) %>% left_join(select(dt$lakes_limno,lagoslakeid,maxdepth)) %>%
left_join(dt$buffer500m.lulc) %>% select(everything(),-contains("nlcd2001"),-contains("nlcd1992"),-contains("nlcd2006")) %>%
left_join(select(dt$locus,lagoslakeid,lake_area_ha,lake_perim_meters,elevation_m)) %>% drop_na(buffer500m_nhdid) %>%
left_join(select(dt$iws,lagoslakeid,iws_ha))
summary(dat)
dat = regressionstats %>% left_join(lagoscrosswalk) %>% drop_na(lagoslakeid) %>% left_join(select(dt$lakes_limno,lagoslakeid,maxdepth)) %>%
left_join(dt$buffer500m.lulc) %>% select(everything(),-contains("nlcd2001"),-contains("nlcd1992"),-contains("nlcd2006")) %>%
left_join(select(dt$locus,lagoslakeid,lake_area_ha,lake_perim_meters,elevation_m)) %>% drop_na(buffer500m_nhdid) %>%
left_join(select(dt$iws,lagoslakeid,iws_ha)) %>% select(everything,-contains("nlcd2011_ha"))
dat = regressionstats %>% left_join(lagoscrosswalk) %>% drop_na(lagoslakeid) %>% left_join(select(dt$lakes_limno,lagoslakeid,maxdepth)) %>%
left_join(dt$buffer500m.lulc) %>% select(everything(),-contains("nlcd2001"),-contains("nlcd1992"),-contains("nlcd2006")) %>%
left_join(select(dt$locus,lagoslakeid,lake_area_ha,lake_perim_meters,elevation_m)) %>% drop_na(buffer500m_nhdid) %>%
left_join(select(dt$iws,lagoslakeid,iws_ha)) %>% select(everything(),-contains("nlcd2011_ha"))
View(dat)
names(dt)
names(dat)
dat = regressionstats %>% left_join(lagoscrosswalk) %>% drop_na(lagoslakeid) %>% left_join(select(dt$lakes_limno,lagoslakeid,maxdepth)) %>%
left_join(dt$buffer500m.lulc) %>% select(everything(),-contains("nlcd2001"),-contains("nlcd1992"),-contains("nlcd2006")) %>%
left_join(select(dt$locus,lagoslakeid,lake_area_ha,lake_perim_meters,elevation_m)) %>% drop_na(buffer500m_nhdid) %>%
left_join(select(dt$iws,lagoslakeid,iws_ha)) %>% select(everything(),-contains("nlcd2011_ha"),-buffer500m_nhdid) %>% mutate(walaratio = iws_ha/lake_area_ha)
View(dat)
names(dat)
names(EcoContext)
dat = regressionstats %>% left_join(lagoscrosswalk) %>% drop_na(lagoslakeid) %>% left_join(select(dt$lakes_limno,lagoslakeid,maxdepth)) %>%
left_join(dt$buffer500m.lulc) %>% select(everything(),-contains("nlcd2001"),-contains("nlcd1992"),-contains("nlcd2006")) %>%
left_join(select(dt$locus,lagoslakeid,lake_area_ha,lake_perim_meters,elevation_m)) %>% drop_na(buffer500m_nhdid) %>%
left_join(select(dt$iws,lagoslakeid,iws_ha)) %>% select(everything(),-contains("nlcd2011_ha"),-buffer500m_nhdid) %>%
mutate(walaratio = iws_ha/lake_area_ha)  %>% left_join(select(EcoContext,WiscID,MaxDepth))
View(dat)
names(dat)
dat = regressionstats %>% left_join(lagoscrosswalk) %>% drop_na(lagoslakeid) %>% left_join(select(dt$lakes_limno,lagoslakeid,maxdepth)) %>%
left_join(dt$buffer500m.lulc) %>% select(everything(),-contains("nlcd2001"),-contains("nlcd1992"),-contains("nlcd2006")) %>%
left_join(select(dt$locus,lagoslakeid,lake_area_ha,lake_perim_meters,elevation_m)) %>% drop_na(buffer500m_nhdid) %>%
left_join(select(dt$iws,lagoslakeid,iws_ha)) %>% select(everything(),-contains("nlcd2011_ha"),-buffer500m_nhdid) %>%
mutate(walaratio = iws_ha/lake_area_ha)  %>% left_join(select(EcoContext,WiscID,MaxDepth)) %>% mutate(MaxDepth = MaxDepth*0.3048)
View(dat)
dat = regressionstats %>% left_join(lagoscrosswalk) %>% drop_na(lagoslakeid) %>% left_join(select(dt$lakes_limno,lagoslakeid,maxdepth)) %>%
left_join(dt$buffer500m.lulc) %>% select(everything(),-contains("nlcd2001"),-contains("nlcd1992"),-contains("nlcd2006")) %>%
left_join(select(dt$locus,lagoslakeid,lake_area_ha,lake_perim_meters,elevation_m)) %>% drop_na(buffer500m_nhdid) %>%
left_join(select(dt$iws,lagoslakeid,iws_ha)) %>% select(everything(),-contains("nlcd2011_ha"),-buffer500m_nhdid) %>%
mutate(walaratio = iws_ha/lake_area_ha)  %>% left_join(select(EcoContext,WiscID,MaxDepth)) %>% mutate(MaxDepth = MaxDepth*0.3048) %>%
mutate(maxdepth[is.na(maxdepth)]=MaxDepth[is.na(maxdepth)])
dat = regressionstats %>% left_join(lagoscrosswalk) %>% drop_na(lagoslakeid) %>% left_join(select(dt$lakes_limno,lagoslakeid,maxdepth)) %>%
left_join(dt$buffer500m.lulc) %>% select(everything(),-contains("nlcd2001"),-contains("nlcd1992"),-contains("nlcd2006")) %>%
left_join(select(dt$locus,lagoslakeid,lake_area_ha,lake_perim_meters,elevation_m)) %>% drop_na(buffer500m_nhdid) %>%
left_join(select(dt$iws,lagoslakeid,iws_ha)) %>% select(everything(),-contains("nlcd2011_ha"),-buffer500m_nhdid) %>%
mutate(walaratio = iws_ha/lake_area_ha)  %>% left_join(select(EcoContext,WiscID,MaxDepth)) %>% mutate(MaxDepth = MaxDepth*0.3048)
dat$maxdepth[is.na(dat$maxdepth)]
dat$maxdepth[which(is.na(dat$maxdepth)]
dat$maxdepth[which(is.na(dat$maxdepth))]
dat$maxdepth[is.na(dat$maxdepth)] = dat$MaxDepth[is.na(dat$maxdepth)]
dat$maxdepth[is.na(dat$maxdepth)]
View(dat)
cbind(dat$maxdepth,dat$MaxDepth)
dat = regressionstats %>% left_join(lagoscrosswalk) %>% drop_na(lagoslakeid) %>% left_join(select(dt$lakes_limno,lagoslakeid,maxdepth)) %>%
left_join(dt$buffer500m.lulc) %>% select(everything(),-contains("nlcd2001"),-contains("nlcd1992"),-contains("nlcd2006")) %>%
left_join(select(dt$locus,lagoslakeid,lake_area_ha,lake_perim_meters,elevation_m)) %>% drop_na(buffer500m_nhdid) %>%
left_join(select(dt$iws,lagoslakeid,iws_ha)) %>% select(everything(),-contains("nlcd2011_ha"),-buffer500m_nhdid) %>%
mutate(walaratio = iws_ha/lake_area_ha)  %>% left_join(select(EcoContext,WiscID,MaxDepth)) %>% mutate(MaxDepth = MaxDepth*0.3048)
dat$maxdepth
cbind(dat$maxdepth,dat$MaxDepth)
View(EcoContext)
dat$maxdepth[is.na(dat$maxdepth)] = dat$MaxDepth[is.na(dat$maxdepth)]
dat = dat %>% drop_na(maxdepth) %>% filter(maxdepth>0)
View(dat)
dat = regressionstats %>% left_join(lagoscrosswalk) %>% drop_na(lagoslakeid) %>% left_join(select(dt$lakes_limno,lagoslakeid,maxdepth)) %>%
left_join(dt$buffer500m.lulc) %>% select(everything(),-contains("nlcd2001"),-contains("nlcd1992"),-contains("nlcd2006")) %>%
left_join(select(dt$locus,lagoslakeid,lake_area_ha,lake_perim_meters,elevation_m)) %>% drop_na(buffer500m_nhdid) %>%
left_join(select(dt$iws,lagoslakeid,iws_ha)) %>% select(everything(),-contains("nlcd2011_ha"),-buffer500m_nhdid) %>%
mutate(walaratio = iws_ha/lake_area_ha)  %>% left_join(select(EcoContext,WiscID,MaxDepth)) %>% mutate(MaxDepth = MaxDepth*0.3048)
dat$maxdepth[is.na(dat$maxdepth)] = dat$MaxDepth[is.na(dat$maxdepth)]
dat = dat %>% drop_na(maxdepth) %>% filter(maxdepth>0) %>% select(-MaxDepth)
View(dat)
model.data = dat #choose which dataset to use so code works without editing further down
names(model.data)
#set response variable
Y.col = 2
Y = model.data[[Y.col]]
names(model.data)[Y.col]
X = model.data[,c(9:47)]
names(X)
(rf.data = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001))
names(model.data)
dat
factor.cols = c(7)
#assigning factor to correct variables
model.data = as.data.frame(model.data)
for(i in 1:length(factor.cols)){
model.data[,factor.cols[i]] = as.factor(model.data[,factor.cols[i]])
}
#set response variable
Y.col = 7
Y = model.data[[Y.col]]
names(model.data)[Y.col]
(rf.data = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001))
#set response variable
Y.col = 4
Y = model.data[[Y.col]]
names(model.data)[Y.col]
(rf.data = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001))
quantile(out$BUGSoutput$sims.list$mu.beta)
quantile(out$BUGSoutput$sims.list$mu.beta,c(0.025,0.975))
quantile(out$BUGSoutput$sims.list$mu.beta,c(0.025,0.5,0.975))
out
str(out)
global.slope = quantile(out$BUGSoutput$sims.list$mu.beta,c(0.025,0.5,0.975))
out$BUGSoutput$sims.list$BB
out$BUGSoutput$sims.list$BB[4501:5000,]
out$BUGSoutput$sims.list$BB[1:4500,1:466,2]
sapply(out$BUGSoutput$sims.list$BB[1:4500,1:466,2],function(x) quantile(x,c(0.025,0.975))
sapply(out$BUGSoutput$sims.list$BB[1:4500,1:466,2],function(x) quantile(x,c(0.025,0.975)))
sims.out = as.data.frame(out$BUGSoutput$sims.list$BB[1:4500,1:466,2])
View(sims.out)
?sapply(list, function)
?sapply()
sapply(sims.out,function(x) quantile(x,c(0.025,0.975)))
t(sapply(sims.out,function(x) quantile(x,c(0.025,0.975))))
global.slope = quantile(out$BUGSoutput$sims.list$mu.beta,c(0.025,0.975))
lake.interval = t(sapply(sims.out,function(x) quantile(x,c(0.025,0.975))))
install.packages("intervals")
library(intervals)
Intervals(lake.interval)
lake.interval = Intervals(t(sapply(sims.out,function(x) quantile(x,c(0.025,0.975)))))
global.slope = Intervals(quantile(out$BUGSoutput$sims.list$mu.beta,c(0.025,0.975)))
global.slope
interval_overlap(from = lake.interval,to = global.slope)
over.lap = interval_overlap(from = lake.interval,to = global.slope)
over.lap
View(over.lap)
lake.interval
unlist(over.lap)
unlist(over.lap$V1)
unlist(over.lap)
over.lap
View(over.lap)
unlist(over.lap)
unlist(over.lap[])
unlist(over.lap[[]])
unlist(over.lap[])
str(over.lap)
over.lap$V1
over.lap$V8
lake.interval
list(over.lap,2)
sapply(over.lap)
sapply(over.lap,'[[',3)
sapply(over.lap,'[',2)
sapply(over.lap,'[',)
sapply(over.lap,'[',1)
as.numeric(sapply(over.lap,'[',1))
lake.interval = as.numeric(sapply(over.lap,'[',1))
lake.interval
lake.interval = Intervals(t(sapply(sims.out,function(x) quantile(x,c(0.025,0.975)))))
over.lap = interval_overlap(from = lake.interval,to = global.slope)
lake.interval = as.numeric(sapply(over.lap,'[',1))
lake.interval
lake.interval = Intervals(t(sapply(sims.out,function(x) quantile(x,c(0.025,0.975)))))
over.lap = interval_overlap(from = lake.interval,to = global.slope)
over.lap = as.numeric(sapply(over.lap,'[',1))
over.lap
lake.interval
lakeinterval = as.data.frame(t(sapply(sims.out,function(x) quantile(x,c(0.025,0.975)))))
lakeinterval
slope.class = rep(NA,466)
global.slope = (quantile(out$BUGSoutput$sims.list$mu.beta,c(0.025,0.975)))
global.slope
global.slope = as.numeric((quantile(out$BUGSoutput$sims.list$mu.beta,c(0.025,0.975)))
global.slope = as.numeric(quantile(out$BUGSoutput$sims.list$mu.beta,c(0.025,0.975)))
global.slope
slope.class = rep(NA,466)
for(i in 1:nrow(lakeinterval)){
if (lakeinterval[i,2] < global.slope[1]) slope.class[i] = 0 else if(lakeinterval[i,1] > global.slope[2]) slope.class=3
}
slope.class
slope.class = rep(NA,466)
for(i in 1:nrow(lakeinterval)){
if (lakeinterval[i,2] < global.slope[1]) slope.class[i] = 0 else if(lakeinterval[i,1] > global.slope[2]) slope.class[i]=3
}
slope.class
lakeinterval
slope.class
over.lap
sum(over.lap,na.rm=T)
sum(is.na(slope.class))
slope.class = rep(NA,466)
for(i in 1:nrow(lakeinterval)){
if (lakeinterval[i,2] < global.slope[1]) slope.class[i] = 0 else if(lakeinterval[i,1] > global.slope[2]) slope.class[i]=3 else slope.class[i] =1
}
slope.class
plot(slop.class,over.lap)
plot(slope.class,over.lap)
slope.clase(!is.na(over.lap))
slope.clase[!is.na(over.lap)]
slope.class[!is.na(over.lap)]
slope.class[is.na(over.lap)]
regressionstats$slope.class = slope.class
View(regressionstats)
dat = regressionstats %>% left_join(lagoscrosswalk) %>% drop_na(lagoslakeid) %>% left_join(select(dt$lakes_limno,lagoslakeid,maxdepth)) %>%
left_join(dt$buffer500m.lulc) %>% select(everything(),-contains("nlcd2001"),-contains("nlcd1992"),-contains("nlcd2006")) %>%
left_join(select(dt$locus,lagoslakeid,lake_area_ha,lake_perim_meters,elevation_m)) %>% drop_na(buffer500m_nhdid) %>%
left_join(select(dt$iws,lagoslakeid,iws_ha)) %>% select(everything(),-contains("nlcd2011_ha"),-buffer500m_nhdid) %>%
mutate(walaratio = iws_ha/lake_area_ha)  %>% left_join(select(EcoContext,WiscID,MaxDepth)) %>% mutate(MaxDepth = MaxDepth*0.3048)
dat$maxdepth[is.na(dat$maxdepth)] = dat$MaxDepth[is.na(dat$maxdepth)]
dat = dat %>% drop_na(maxdepth) %>% filter(maxdepth>0) %>% select(-MaxDepth)
View(dat)
model.data = dat #choose which dataset to use so code works without editing further down
names(model.data)
factor.cols = c(7:8)
#assigning factor to correct variables
model.data = as.data.frame(model.data)
for(i in 1:length(factor.cols)){
model.data[,factor.cols[i]] = as.factor(model.data[,factor.cols[i]])
}
#set response variable
Y.col = 8
Y = model.data[[Y.col]]
names(model.data)[Y.col]
#check counts for balancing RF model
table(Y)
X = model.data[,c(10:48)]
names(X)
(rf.data = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=rep(min(table(Y)),nlevels(Y)),strata=Y))
pred = predict(rf.data)
(conf.out = confusionMatrix(pred,Y))
View(dat)
View(dat)
dat = regressionstats %>% left_join(select(EcoContext,WiscID,lat,long ))
View(dat)
library(maps)
library(maptools)
library(scales)
map.regions = c('wisconsin')
map('state',region=map.regions,col=grey(.98),fill=TRUE,resolution = 0,mar=c(0,0,0,0),border=grey(.5),lty=5, main="Water Level Clusters")
points(dat$long,dat$lat,col=alpha(as.numeric(dat$slope.class),.7),pch=16)
as.numeric(dat$slope.class)
points(dat$long,dat$lat,col=alpha(as.numeric(dat$slope.class)+1,.7),pch=16)
legend("topright",legend=c(1:2),pch=16,col=c(1:2),title = "Cluster ID",bty="n")
legend("topright",legend=c("< Global","= Global","> Global"),pch=16,col=c(1:3),title = "Cluster ID",bty="n")
legend("topright",legend=c("< Global","= Global","> Global"),pch=16,col=c(1,2,4),title = "Cluster ID",bty="n")
map('state',region=map.regions,col=grey(.98),fill=TRUE,resolution = 0,mar=c(0,0,0,0),border=grey(.5),lty=5, main="Water Level Clusters")
points(dat$long,dat$lat,col=alpha(as.numeric(dat$slope.class)+1,.7),pch=16)
legend("topright",legend=c("< Global","= Global","> Global"),pch=16,col=c(1,2,4),title = "Cluster ID",bty="n")
dev.new(width=6,height=6)
map('state',region=map.regions,col=grey(.98),fill=TRUE,resolution = 0,mar=c(0,0,0,0),border=grey(.5),lty=5, main="Water Level Clusters")
points(dat$long,dat$lat,col=alpha(as.numeric(dat$slope.class)+1,.7),pch=16)
legend("topright",legend=c("< Global","= Global","> Global"),pch=16,col=c(1,2,4),title = "Cluster ID",bty="n")
dev.new(width=6,height=6)
map('state',region=map.regions,col=grey(.98),fill=TRUE,resolution = 0,mar=c(0,0,0,0),border=grey(.5),lty=5, main="Water Level Clusters")
points(dat$long,dat$lat,col=alpha(as.numeric(dat$slope.class)+1,.7),pch=16)
legend("topright",legend=c("< Global","= Global","> Global"),pch=16,col=c(1,2,4),title = "Precip Relationship",bty="n")
dev.new(width=6,height=6)
map('state',region=map.regions,col=grey(.98),fill=TRUE,resolution = 0,mar=c(0,0,0,0),border=grey(.5),lty=5, main="Water Level Clusters")
points(dat$long,dat$lat,col=alpha(as.numeric(dat$slope.class)+1,.7),pch=16)
legend("topright",legend=c("Slope < 1","Slope 1-1.3","Slope > 1.3"),pch=16,col=c(1,2,4),title = "Precip Relationship",bty="n")
str(out)
