Lon = col_skip(), Name = col_skip(),
Pct_In_NWI = col_skip(), Pct_In_USA = col_skip(),
TNMID = col_skip()))
View(HU12)
HU12$HUC12 = as.numeric(HU12$HUC12)
HU12 = HU12[which(HU12$HUC12 %in% hucids$HUC12),]
length(unique(hucids$HUC12))
hucids = merge(hucids,HU12)
View(hucids)
names(hucids)[21] = "hu12_zoneid"
names(hucids)
names(hucids)[c(4,7,8,9,18,20,21]
names(hucids)[c(4,7,8,9,18,20,21)]
hucids = hucids[,c(4,7,8,9,18,20,21)]
rm(HU12)
View(hucids)
View(hucids)
library(readr)
Hu12_lulc <- read_delim("~/Dropbox/CSI_LIMNO/CSI_LAGOS-exports/LAGOS-NE-EDI/LAGOS-NE-GEO-EXPORT/original_uploads/LAGOSNE_hu12_lulc105.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(Hu12_lulc)
names(Hu12_lulc)
names(Hu12_lulc)[c(1,4,81:112,149,153)]
Hu12_lulc =Hu12_lulc[,c(1,4,81:112,149,153)]
names(Hu12_lulc)
names(Hu12_lulc)[c(1,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34:36)]
Hu12_lulc = Hu12_lulc[,c(1,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34:36)]
save.image("~/Documents/GitHub/waterlevels/WaterLevels.RData")
hu12_chag <- read.delim("~/Dropbox/CSI_LIMNO/CSI_LAGOS-exports/LAGOS-NE-EDI/LAGOS-NE-GEO-EXPORT/original_uploads/LAGOSNE_hu12_chag105.txt")
View(hu12_chag)
Hu12_lulc = Hu12_lulc[which(Hu12_lulc$hu12_zoneid %in% hucids$hu12_zoneid),]
Hu12_chag = Hu12_chag[which(Hu12_chag$hu12_zoneid %in% hucids$hu12_zoneid),]
hu12_chag = hu12_chag[which(hu12_chag$hu12_zoneid %in% hucids$hu12_zoneid),]
names(hu12_chag)
names(hu12_chag)[c(1:5,78:85:85,98:143)]
names(hu12_chag)[c(1:5,78:85,98:143)]
hu12_chag = hu12_chag[,c(1:5,78:85,98:143)]
names(hu12_chag)
names(hu12_chag)[c(1:17,19,seq(from=21,to=59,by=2)]
names(hu12_chag)[c(1:17,19,seq(from=21,to=59,by=2))]
hu12_chag = hu12_chag[,c(1:17,19,seq(from=21,to=59,by=2))]
View(hu12_chag)
huc12 = merge(Hu12_lulc,hu12_chag)
rm(c(hu12_chag,Hu12_lulc)
rm(c(hu12_chag,Hu12_lulc))
rm(list(c(hu12_chag,Hu12_lulc)))
rm(hu12_chag)
rm(Hu12_lulc)
save.image("~/Documents/GitHub/waterlevels/WaterLevels.RData")
View(huc12)
hu4_lulc <- read.delim("~/Dropbox/CSI_LIMNO/CSI_LAGOS-exports/LAGOS-NE-EDI/LAGOS-NE-GEO-EXPORT/original_uploads/LAGOSNE_hu4_lulc105.txt")
View(hu4_lulc)
which(names(hu4_lulc) %in% names(huc12))
names(hu4_lulc)[c(1,4,81:112,149,153)]
names(hu4_lulc)[c(1,4,81:112,149,153)]
names(hu4_lulc)
names(hu4_lulc)[c(1,4,82:112,149,153)]
hu4_lulc = hu4_lulc[,c(1,4,82:112,149,153)]
names(hu4_lulc)
names(hu4_lulc)[c(1,2,seq(from=3,to=33,by=2),34,35)]
hu4_lulc = hu4_lulc[,c(1,2,seq(from=3,to=33,by=2),34,35)]
hu4_chag <- read.delim("~/Dropbox/CSI_LIMNO/CSI_LAGOS-exports/LAGOS-NE-EDI/LAGOS-NE-GEO-EXPORT/original_uploads/LAGOSNE_hu4_chag105.txt")
View(hu4_chag)
hu4_lulc = hu4_lulc[which(hu4_lulc$hu4_zoneid %in% hucids$hu4_zoneid),]
hu4_chag = hu4_chag[which(hu4_chag$hu4_zoneid %in% hucids$hu4_zoneid),]
names(hu12_chag)[c(1:5,78:85,98:143)]
names(hu4_chag)[c(1:5,78:85,98:143)]
hu4_chag = hu4_chag[,c(1:5,78:85,98:143)]
names(hu4_chag)[c(1:17,19,seq(from=21,to=59,by=2))]
hu4_chag = hu4_chag[,c(1:17,19,seq(from=21,to=59,by=2))]
hu4 = merge(hu4_chag,hu4_lulc)
rm(hu4_chag)
rm(hu4_lulc)
save.image("~/Documents/GitHub/waterlevels/WaterLevels.RData")
LAGOSNE_hu8_lulc105 <- read.delim("~/Dropbox/CSI_LIMNO/CSI_LAGOS-exports/LAGOS-NE-EDI/LAGOS-NE-GEO-EXPORT/original_uploads/LAGOSNE_hu8_lulc105.txt")
View(LAGOSNE_hu8_lulc105)
hu8_lulc <- read.delim("~/Dropbox/CSI_LIMNO/CSI_LAGOS-exports/LAGOS-NE-EDI/LAGOS-NE-GEO-EXPORT/original_uploads/LAGOSNE_hu8_lulc105.txt")
rm(LAGOSNE_hu8_lulc105)
names(hu8_lulc)
hu8_lulc = hu8_lulc[,c(1,4,81:112,149,153)]
names(hu8_lulc)
hu8_lulc = hu8_lulc[,c(1,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34:36)]
LAGOSNE_hu8_chag105 <- read.delim("~/Dropbox/CSI_LIMNO/CSI_LAGOS-exports/LAGOS-NE-EDI/LAGOS-NE-GEO-EXPORT/original_uploads/LAGOSNE_hu8_chag105.txt")
View(LAGOSNE_hu8_chag105)
rm(LAGOSNE_hu8_chag105)
hu8_chag <- read.delim("~/Dropbox/CSI_LIMNO/CSI_LAGOS-exports/LAGOS-NE-EDI/LAGOS-NE-GEO-EXPORT/original_uploads/LAGOSNE_hu8_chag105.txt")
hu8_lulc = hu8_lulc[which(hu8_lulc$hu8_zoneid %in% hucids$hu8_zoneid),]
names(hu8_chag)
names(hu8_chag)[c(1:5,78:85,98:143)]
hu8_chag = hu8_chag[,c(1:5,78:85,98:143)]
hu8_chag = hu8_chag[,c(1:17,19,seq(from=21,to=59,by=2))]
hu8_chag = hu8_chag[which(hu8_chag$hu8_zoneid %in% hucids$hu8_zoneid),]
View(hu8_chag)
names(hu8_chag)
hu8 = merge(hu8_chag,hu8_lulc)
rm(hu8_chag)
rm(hu8_lulc)
save.image("~/Documents/GitHub/waterlevels/WaterLevels.RData")
View(hucids)
waterlevelclusterID <- read.csv("~/Documents/GitHub/waterlevels/data/waterlevelclusterID.csv")
View(waterlevelclusterID)
View(waterlevelclusterID)
names(waterlevelclusterID)
waterlevelclusterID = waterlevelclusterID[,c(1,3,7,8,2,4,5,6)]
names(waterlevelclusterID)
waterlevelclusterID <- read.csv("~/Documents/GitHub/waterlevels/data/waterlevelclusterID.csv")
waterlevelclusterID = waterlevelclusterID[,c(1,3,2,7,8,4,5,6)]
waterlevelclusterID <- read.csv("~/Documents/GitHub/waterlevels/data/waterlevelclusterID.csv")
waterlevelclusterID = waterlevelclusterID[,c(1,3,2,7,8,4,5,6)]
names(waterlevelclusterID)
waterlevelclusterID <- read.csv("~/Documents/GitHub/waterlevels/data/waterlevelclusterID.csv")
waterlevelclusterID = waterlevelclusterID[,c(1,3,7,2,8,4,5,6)]
names(waterlevelclusterID)
names(hucids)
names(hucids)[1] = "wiscwaterlevelid"
hucids = hucids[,c(1,5:7)]
View(hucids)
save.image("~/Documents/GitHub/waterlevels/WaterLevels.RData")
View(hucids)
hucids = merge(hucids,hu4)
hucids = merge(hucids,hu8)
hucids = merge(hucids,huc12)
waterlevelclusterID = merge(waterlevelclusterID,hucids)
View(waterlevelclusterID)
names(waterlevelclusterID)
save.image("~/Documents/GitHub/waterlevels/WaterLevels.RData")
library(randomForest)
easy.formula<-function(response,predictors){
easy <- as.formula(paste(paste(response," ~"),
paste(predictors, collapse= "+"))); return(easy)}
names(waterlevelclusterID)
waterlevelclusterID[,c(3:5)] = as.factor(waterlevelclusterID[,c(3:5)])
waterlevelclusterID[,3] = as.factor(waterlevelclusterID[,3])
factor.cols = c(3,4,5,9:11)
for(i in 1:length(factor.cols)){
waterlevelclusterID[,i] = as.factor(waterlevelclusterID[,i]) #3,4,5,9:11
}
str(waterlevelclusterID)
names(waterlevelclusterID)
length(factor.cols)
waterlevelclusterID[,1] = as.numeric(waterlevelclusterID[,1])
names(waterlevelclusterID)[1:6]
for(i in 1:length(factor.cols)){
waterlevelclusterID[,factor.cols(i)] = as.factor(waterlevelclusterID[,factor.cols(i)])
}
factor.cols(i)
factor.cols = c(3,4,5,9:11)
factor.cols(i)
for(i in 1:length(factor.cols)){
waterlevelclusterID[,factor.cols[i]] = as.factor(waterlevelclusterID[,factor.cols[i]])
}
table(waterlevelclusterID$clusterid_dtw1_3)
names(waterlevelclusterID)
response = names(waterlevelclusterID)[4]
response
(predictors = names(SecchiOut)[c(6:179)])
(predictors = names(waterlevelclusterID)[c(6:179)])
# predictors = predictors[c(5,6,7,8,9,11,12,13)]
big.formula = easy.formula(response, predictors)
table(waterlevelclusterID$clusterid_dtw1_3)
save.image("~/Documents/GitHub/waterlevels/WaterLevels.RData")
rf.data = randomForest(big.formula,data=waterlevelclusterID,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=39)
predictors
names(waterlevelclusterID)
(predictors = names(waterlevelclusterID)[c(6:8,10:179)])
# predictors = predictors[c(5,6,7,8,9,11,12,13)]
big.formula = easy.formula(response, predictors)
rf.data = randomForest(big.formula,data=waterlevelclusterID,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=39)
rf.data
pred = predict(rf.data)
(conf.out = confusionMatrix(pred,SecchiOut$cluster))
library(caret)
library(e1071)
(conf.out = confusionMatrix(pred,SecchiOut$cluster))
(conf.out = confusionMatrix(pred,waterlevelclusterID$clusterid_dtw1_4))
table(waterlevelclusterID[,5])
response = names(waterlevelclusterID)[5]
rf.data = randomForest(big.formula,data=waterlevelclusterID,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=34)
pred = predict(rf.data)
(conf.out = confusionMatrix(pred,waterlevelclusterID$clusterid_dtw1_4))
response = names(waterlevelclusterID)[3]
(response = names(waterlevelclusterID)[3])
table(waterlevelclusterID[,3])
rf.data = randomForest(big.formula,data=waterlevelclusterID,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=39)
pred = predict(rf.data)
(conf.out = confusionMatrix(pred,waterlevelclusterID$clusterid_dtw1_4))
(response = names(waterlevelclusterID)[5])
table(waterlevelclusterID[,5])
rf.data = randomForest(big.formula,data=waterlevelclusterID,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=34)
pred = predict(rf.data)
(conf.out = confusionMatrix(pred,waterlevelclusterID$clusterid_dtw1_4))
(response = names(waterlevelclusterID)[4])
table(waterlevelclusterID[,4])
table(waterlevelclusterID[,5])
table(waterlevelclusterID[,3])
table(waterlevelclusterID[,4])
(response = names(waterlevelclusterID)[4])
table(waterlevelclusterID[,4])
(response = names(waterlevelclusterID)[4])
table(waterlevelclusterID[,4])
# predictors = predictors[c(5,6,7,8,9,11,12,13)]
big.formula = easy.formula(response, predictors)
rf.data = randomForest(big.formula,data=waterlevelclusterID,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=31)
pred = predict(rf.data)
(conf.out = confusionMatrix(pred,waterlevelclusterID$clusterid_dtw1_4))
(response = names(waterlevelclusterID)[3])
(response = names(waterlevelclusterID)[5])
table(waterlevelclusterID[,4])
table(waterlevelclusterID[,5])
(predictors = names(waterlevelclusterID)[c(6:8,10:179)])
table(waterlevelclusterID[,5])
# predictors = predictors[c(5,6,7,8,9,11,12,13)]
big.formula = easy.formula(response, predictors)
rf.data = randomForest(big.formula,data=waterlevelclusterID,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=34)
pred = predict(rf.data)
(conf.out = confusionMatrix(pred,waterlevelclusterID$clusterid_dtw1_4))
(response = names(waterlevelclusterID)[5])
table(waterlevelclusterID[,5])
(predictors = names(waterlevelclusterID)[c(6:8,10:179)])
# predictors = predictors[c(5,6,7,8,9,11,12,13)]
big.formula = easy.formula(response, predictors)
rf.data = randomForest(big.formula,data=waterlevelclusterID,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=34)
pred = predict(rf.data)
(conf.out = confusionMatrix(pred,waterlevelclusterID$clusterid_dtw1_4))
(response = names(waterlevelclusterID)[4])
table(waterlevelclusterID[,5])
table(waterlevelclusterID[,4])
# predictors = predictors[c(5,6,7,8,9,11,12,13)]
big.formula = easy.formula(response, predictors)
rf.data = randomForest(big.formula,data=waterlevelclusterID,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=31)
pred = predict(rf.data)
(conf.out = confusionMatrix(pred,waterlevelclusterID$clusterid_dtw1_4))
table(waterlevelclusterID[,5])
(response = names(waterlevelclusterID)[5])
# predictors = predictors[c(5,6,7,8,9,11,12,13)]
big.formula = easy.formula(response, predictors)
rf.data = randomForest(big.formula,data=waterlevelclusterID,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=34)
rf.data
pred = predict(rf.data)
(conf.out = confusionMatrix(pred,waterlevelclusterID$clusterid_dtw1_4))
(conf.out = confusionMatrix(pred,waterlevelclusterID$clusterid_dtw2_4))
(response = names(waterlevelclusterID)[3])
table(waterlevelclusterID[,3])
# predictors = predictors[c(5,6,7,8,9,11,12,13)]
big.formula = easy.formula(response, predictors)
rf.data = randomForest(big.formula,data=waterlevelclusterID,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=39)
rf.data
pred = predict(rf.data)
(conf.out = confusionMatrix(pred,waterlevelclusterID$clusterid_dtw1_3))
Y = waterlevelclusterID[[5]]
Y
X = waterlevelclusterID[,c(6:8,10:179)]
(rf.data = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001))
table(waterlevelclusterID[,5])
(rf.data = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001),sampsize=34)
(rf.data = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=34)
(rf.data = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=34))
med.vsurf = VSURF(x = X,y = Y)
install.packages("VSURF")
require(VSURF)
med.vsurf = VSURF(x = X,y = Y)
length(med.vsurf$varselect.pred)
names(X[med.vsurf$varselect.pred])
X = X[,med.vsurf$varselect.pred]
(rf.data2 = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001))
table(waterlevelclusterID[,5])
(response = names(waterlevelclusterID)[5])
(conf.out = confusionMatrix(pred,waterlevelclusterID$clusterid_dtw2_4))
X
Y
(conf.out = confusionMatrix(pred,Y))
(rf.data2 = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001),sampsize=34))
(rf.data2 = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=34))
pred = predict(rf.data2)
(conf.out = confusionMatrix(pred,Y))
View(X)
library(forestFloor)
install.packages("forestFloor")
library(forestFloor)
ff = forestFloor(rf.fit=rf.data2,X=X,bootstrapFC = TRUE)
Col=fcol(ff,1)
par(mfrow=c(1,1))
plot(ff,col=Col,orderByImportance=TRUE)
pplot<-partialPlot(mod,dat,x.var = names(dat)[i],xlab=names(dat)[i])
Y
Col=fcol(ff,3)
par(mfrow=c(1,1))
plot(ff,col=Col,orderByImportance=TRUE)
imp.out = importance(rf.data2)
imp.out = importance(rf.data2)
X = X[order(imp.out[,1],decreasing = TRUE)]
options(device="quartz")
dev.new(width=6,height=4)
par(oma=c(1.2,.8,.2,.2),mar=c(0,0,0,0),family="Times",ps=10)
dotplot(imp.out[order(imp.out[,1],decreasing = FALSE),1],main="",xlab="Increase Mean Square Error (%)")
save.image("~/Documents/GitHub/waterlevels/WaterLevels.RData")
X
ff = forestFloor(rf.fit=rf.data2,X=X[,-3],bootstrapFC = TRUE)
ff = forestFloor(rf.fit=rf.data2,X=X,bootstrapFC = TRUE)
fcol
?fcol
Col=fcol(ff,cols=c("red","blue","green","purple"))
Col=fcol(ff,cols=1)
par(mfrow=c(1,1))
plot(ff,col=Col,orderByImportance=TRUE)
names(X)
Col=fcol(ff,cols=3)
plot(ff,col=Col,orderByImportance=TRUE)
Col=fcol(ff,cols=2)
par(mfrow=c(1,1))
plot(ff,col=Col,orderByImportance=TRUE)
med.vsurf
med.vsurf$varselect.interp
med.vsurf$varselect.pred
names(X[med.vsurf$varselect.pred])
X = waterlevelclusterID[,c(6:8,10:179)]
names(X[med.vsurf$varselect.pred])
X = X[,med.vsurf$varselect.interp]
names(X[med.vsurf$varselect.interp])
X = waterlevelclusterID[,c(6:8,10:179)]
names(X[med.vsurf$varselect.interp])
X = X[,med.vsurf$varselect.interp]
(rf.data2 = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=34))
pred = predict(rf.data2)
(conf.out = confusionMatrix(pred,Y))
imp.out = importance(rf.data2)
X = X[order(imp.out[,1],decreasing = TRUE)]
dotplot(imp.out[order(imp.out[,1],decreasing = FALSE),1],main="",xlab="Increase Mean Square Error (%)")
ff = forestFloor(rf.fit=rf.data2,X=X,bootstrapFC = TRUE)
Col=fcol(ff,cols=2)
par(mfrow=c(1,1))
plot(ff,col=Col,orderByImportance=TRUE)
?fcol
plot(ff,col=Col)
ff
?show3d
show3d(ff,1:2,col=Col)
plot(ff)
X = X[,med.vsurf$varselect.pre]
X = waterlevelclusterID[,c(6:8,10:179)]
X = X[,med.vsurf$varselect.pred]
X
X= X[,-c(1,2)]
X
(rf.data2 = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=34))
pred = predict(rf.data2)
(conf.out = confusionMatrix(pred,Y))
X = waterlevelclusterID[,c(6:8,10:179)]
X = X[,med.vsurf$varselect.pred]
X
X=X[,-2]
(rf.data2 = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=34))
pred = predict(rf.data2)
(conf.out = confusionMatrix(pred,Y))
imp.out = importance(rf.data2)
X = X[order(imp.out[,1],decreasing = TRUE)]
# options(device="quartz")
# dev.new(width=6,height=4)
par(oma=c(1.2,.8,.2,.2),mar=c(0,0,0,0),family="Times",ps=10)
dotplot(imp.out[order(imp.out[,1],decreasing = FALSE),1],main="",xlab="Increase Mean Square Error (%)")
ff = forestFloor(rf.fit=rf.data2,X=X,bootstrapFC = TRUE)
plot(ff)
plot(ff,cex=2)
plot(ff,cex.pt=1)
plot(ff)
plot(ff)
?plot
?par
par(cex.axis=1.5,cex.lab=2,cex.main=1.5)
plot(ff)
X = waterlevelclusterID[,c(6:8,10:179)]
X = X[,med.vsurf$varselect.interp]
(rf.data2 = randomForest(y = Y,x = X,keep.inbag=TRUE,importance=TRUE,ntree=10001,sampsize=34))
pred = predict(rf.data2)
(conf.out = confusionMatrix(pred,Y))
imp.out = importance(rf.data2)
X = X[order(imp.out[,1],decreasing = TRUE)]
options(device="quartz")
dev.new(width=6,height=4)
par(oma=c(1.2,.8,.2,.2),mar=c(0,0,0,0),family="Times",ps=10)
dotplot(imp.out[order(imp.out[,1],decreasing = FALSE),1],main="",xlab="Increase Mean Square Error (%)")
ff = forestFloor(rf.fit=rf.data2,X=X,bootstrapFC = TRUE)
par(mfrow=c(1,1))
dev.new(width=9,height=3)
par(oma=c(1.2,.8,.2,.2),mar=c(0,0,0,0),family="Times",ps=10,cex.axis=1.5,cex.lab=2,cex.main=1.5)
plot(ff)
dev.new(width=9,height=4)
par(oma=c(1.2,.8,.2,.2),mar=c(0,0,0,0),family="Times",ps=10,cex.axis=1.5,cex.lab=2,cex.main=1.5)
plot(ff)
names(X[med.vsurf$varselect.interp])
X = waterlevelclusterID[,c(6:8,10:179)]
names(X[med.vsurf$varselect.interp])
save.image("~/Documents/GitHub/waterlevels/WaterLevels.RData")
map.regions = c('wisconsin')
map('state',region=map.regions,col=grey(.98),fill=TRUE,resolution = 0,mar=c(0,0,0,0),border=grey(.5),lty=5)
install.packages("maps")
library(maps)
library(maptools)
map.regions = c('wisconsin')
map('state',region=map.regions,col=grey(.98),fill=TRUE,resolution = 0,mar=c(0,0,0,0),border=grey(.5),lty=5)
dev.new(width=4,height=6)
map('state',region=map.regions,col=grey(.98),fill=TRUE,resolution = 0,mar=c(0,0,0,0),border=grey(.5),lty=5)
dev.off()
dev.new(width=4,height=5)
map('state',region=map.regions,col=grey(.98),fill=TRUE,resolution = 0,mar=c(0,0,0,0),border=grey(.5),lty=5)
dev.new(width=5,height=5)
map('state',region=map.regions,col=grey(.98),fill=TRUE,resolution = 0,mar=c(0,0,0,0),border=grey(.5),lty=5)
points(waterlevelclusterID$Longitude,waterlevelclusterID$Latitude,col=as.numeric(waterlevelclusterID$clusterid_dtw2_4)
points(waterlevelclusterID$Longitude,waterlevelclusterID$Latitude,col=as.numeric(waterlevelclusterID$clusterid_dtw2_4))
points(waterlevelclusterID$Longitude,waterlevelclusterID$Latitude,col=as.numeric(waterlevelclusterID$clusterid_dtw2_4),pch=16)
library(scales)
points(waterlevelclusterID$Longitude,waterlevelclusterID$Latitude,col=alpha(as.numeric(waterlevelclusterID$clusterid_dtw2_4,.7)),pch=16)
points(waterlevelclusterID$Longitude,waterlevelclusterID$Latitude,col=alpha(as.numeric(waterlevelclusterID$clusterid_dtw2_4),.7),pch=16)
map('state',region=map.regions,col=grey(.98),fill=TRUE,resolution = 0,mar=c(0,0,0,0),border=grey(.5),lty=5)
points(waterlevelclusterID$Longitude,waterlevelclusterID$Latitude,col=alpha(as.numeric(waterlevelclusterID$clusterid_dtw2_4),.7),pch=16)
legend("topright",legend=c(1:34),pch=16,col=c(1:4))
map('state',region=map.regions,col=grey(.98),fill=TRUE,resolution = 0,mar=c(0,0,0,0),border=grey(.5),lty=5)
points(waterlevelclusterID$Longitude,waterlevelclusterID$Latitude,col=alpha(as.numeric(waterlevelclusterID$clusterid_dtw2_4),.7),pch=16)
legend("topright",legend=c(1:4),pch=16,col=c(1:4))
legend("topright",legend=c(1:4),pch=16,col=c(1:4),title = "Cluster")
?legend
map('state',region=map.regions,col=grey(.98),fill=TRUE,resolution = 0,mar=c(0,0,0,0),border=grey(.5),lty=5)
points(waterlevelclusterID$Longitude,waterlevelclusterID$Latitude,col=alpha(as.numeric(waterlevelclusterID$clusterid_dtw2_4),.7),pch=16)
legend("topright",legend=c(1:4),pch=16,col=c(1:4),title = "Cluster ID",bty="n")
(conf.out = confusionMatrix(pred,Y))
rf.drivers = data.frame(wiscwaterlevelid=waterlevelclusterID$wiscwaterlevelid,clusterid = waterlevelclusterID$clusterid_dtw2_4,clusterpred=pred,meanrunnoff=waterlevelclusterID$hu12_runoff_mean,maxrunnoff=waterlevelclusterID$hu12_runoff_max,maxprecip=waterlevelclusterID$hu12_prism_ppt_30yr_normal_800mm2_annual_max)
View(rf.drivers)
boxplot(rf.drivers$clusterid~rf.drivers$meanrunnoff)
boxplot(rf.drivers$meanrunnoff~rf.drivers$clusterid)
dev.new(width=4,height=4)
boxplot(rf.drivers$meanrunnoff~rf.drivers$clusterid)
par(oma=c(1.2,.8,.2,.2),mar=c(0,0,0,0),family="Times",ps=10,cex.axis=1.5,cex.lab=2,cex.main=1.5)
boxplot(rf.drivers$meanrunnoff~rf.drivers$clusterid)
par(oma=c(3,3,.2,.2),mar=c(0,0,0,0),family="Times",ps=10,cex.axis=1.5,cex.lab=2,cex.main=1.5)
boxplot(rf.drivers$meanrunnoff~rf.drivers$clusterid)
par(oma=c(3,3,.2,.2),mar=c(0,0,0,0),family="Times",ps=10)
boxplot(rf.drivers$meanrunnoff~rf.drivers$clusterid)
dev.off()
dev.new(width=4,height=4)
par(oma=c(3,3,.2,.2),mar=c(0,0,0,0),family="Times",ps=10)
boxplot(rf.drivers$meanrunnoff~rf.drivers$clusterid)
boxplot(rf.drivers$meanrunnoff~rf.drivers$clusterid,xlab="Cluster ID",ylab="Runoff (in/yr)")
dev.new(width=4,height=4)
par(oma=c(3,3,.2,.2),mar=c(0,0,0,0),family="Times",ps=10)
boxplot(rf.drivers$meanrunnoff~rf.drivers$clusterid,xlab="Cluster ID",ylab="Runoff (in/yr)")
boxplot(rf.drivers$meanrunnoff~rf.drivers$clusterid,xlab="",ylab="R")
mtext(side=1,line=-2,"Cluster ID")
mtext(side=1,line=2,"Cluster ID")
mtext(side=1,line=1.8,"Cluster ID",cex=1.5)
mtext(side=1,line=2,"Cluster ID",cex=1.5)
boxplot(rf.drivers$meanrunnoff~rf.drivers$clusterid,xlab="",ylab="R")
mtext(side=1,line=2,"Cluster ID",cex=1.5)
boxplot(rf.drivers$meanrunnoff~rf.drivers$clusterid,xlab="",ylab="R")
mtext(side=1,line=2,"Cluster ID",cex=1.25)
mtext(side=2,line=2,"Runnoff (in/yr)",cex=1.25)
mtext(side=2,line=2,"Mean Runnoff (in/yr)",cex=1.25)
boxplot(rf.drivers$meanrunnoff~rf.drivers$clusterid,xlab="",ylab="R")
mtext(side=1,line=2,"Cluster ID",cex=1.25)
mtext(side=2,line=2,"Mean Runnoff (in/yr)",cex=1.25)
boxplot(rf.drivers$maxrunnoff~rf.drivers$clusterid,xlab="",ylab="R")
boxplot(rf.drivers$maxprecip~rf.drivers$clusterid,xlab="",ylab="")
dev.off()
graphics.off()
dev.new(width=4,height=4)
par(oma=c(3,3,.2,.2),mar=c(0,0,0,0),family="Times",ps=10)
boxplot(rf.drivers$maxprecip~rf.drivers$clusterid,xlab="",ylab="")
mtext(side=1,line=2,"Cluster ID",cex=1.25)
mtext(side=2,line=2,"Max Precip (mm/yr)",cex=1.25)
save.image("~/Documents/GitHub/waterlevels/WaterLevels.RData")
dtw2_4_validation <- read.csv("~/Documents/GitHub/waterlevels/data/dtw2_4_validation.csv")
View(dtw2_4_validation)
plot(dtw2_4_validation$num_clust,dtw2_4_validation$Rand_DTW,ylim=range(dtw2_4_validation[,c(2:3)]))
plot(dtw2_4_validation$num_clust,dtw2_4_validation$Rand_DTW,ylim=range(dtw2_4_validation[,c(2:3)]),type="b",col="blue")
plot(dtw2_4_validation$num_clust,dtw2_4_validation$Rand_DTW,ylim=range(dtw2_4_validation[,c(2:3)]),type="b",col="blue",pch=16)
plot(dtw2_4_validation$num_clust,dtw2_4_validation$Rand_DTW,ylim=range(dtw2_4_validation[,c(2:3)]),type="b",col="blue",pch=16,lwd=2)
plot(dtw2_4_validation$num_clust,dtw2_4_validation$Rand_DTW,ylim=range(dtw2_4_validation[,c(2:3)]),type="b",col="blue",pch=16,lwd=2,xlab="",ylab="")
lines(dtw2_4_validation$num_clust,dtw2_4_validation$Cluster_DTW,type="b",col="red",pch=16,lwd=2)
lines(dtw2_4_validation$num_clust,dtw2_4_validation$DTW_DIFF,type="b",col="green",pch=16,lwd=2)
mtext(side=2,line=2,"DTW Distance",cex=1.25)
mtext(side=2,line=2,"DTW Distance",cex=1.25)
mtext(side=1,line=2,"Number of Clusters",cex=1.25)
legend("right",legend=c("Random Clustering","Kernal Clustering","Difference"))
legend("right",legend=c("Random Clustering","Kernal Clustering","Difference"),pch=16,lwd=2,col=c("blue","red","green"))
par(oma=c(3,3,.2,.2),mar=c(0,0,0,0),family="Times",ps=10)
plot(dtw2_4_validation$num_clust,dtw2_4_validation$Rand_DTW,ylim=range(dtw2_4_validation[,c(2:3)]),type="b",col="blue",pch=16,lwd=2,xlab="",ylab="")
lines(dtw2_4_validation$num_clust,dtw2_4_validation$Cluster_DTW,type="b",col="red",pch=16,lwd=2)
lines(dtw2_4_validation$num_clust,dtw2_4_validation$DTW_DIFF,type="b",col="green",pch=16,lwd=2)
mtext(side=1,line=2,"Number of Clusters",cex=1.25)
mtext(side=2,line=2,"DTW Distance",cex=1.25)
legend("right",legend=c("Random Clustering","Kernal Clustering","Difference"),pch=16,lwd=2,col=c("blue","red","green"),bty="n")
dev.new(width=4,height=4)
dev.off()
dev.new(width=4,height=4)
par(oma=c(3,3,.2,.2),mar=c(0,0,0,0),family="Times",ps=10)
plot(dtw2_4_validation$num_clust,dtw2_4_validation$Rand_DTW,ylim=range(dtw2_4_validation[,c(2:3)]),type="b",col="blue",pch=16,lwd=2,xlab="",ylab="")
lines(dtw2_4_validation$num_clust,dtw2_4_validation$Cluster_DTW,type="b",col="red",pch=16,lwd=2)
lines(dtw2_4_validation$num_clust,dtw2_4_validation$DTW_DIFF,type="b",col="green",pch=16,lwd=2)
mtext(side=1,line=2,"Number of Clusters",cex=1.25)
mtext(side=2,line=2,"DTW Distance",cex=1.25)
legend("right",legend=c("Random Clustering","Kernal Clustering","Difference"),pch=16,lwd=2,col=c("blue","red","green"),bty="n")
graphics.off()
dev.new(width=4,height=4)
options(device="quartz")
dev.new(width=4,height=4)
par(oma=c(3,3,.2,.2),mar=c(0,0,0,0),family="Times",ps=10)
plot(dtw2_4_validation$num_clust,dtw2_4_validation$Rand_DTW,ylim=range(dtw2_4_validation[,c(2:3)]),type="b",col="blue",pch=16,lwd=2,xlab="",ylab="")
lines(dtw2_4_validation$num_clust,dtw2_4_validation$Cluster_DTW,type="b",col="red",pch=16,lwd=2)
lines(dtw2_4_validation$num_clust,dtw2_4_validation$DTW_DIFF,type="b",col="green",pch=16,lwd=2)
mtext(side=1,line=2,"Number of Clusters",cex=1.25)
mtext(side=2,line=2,"DTW Distance",cex=1.25)
legend("right",legend=c("Random Clustering","Kernal Clustering","Difference"),pch=16,lwd=2,col=c("blue","red","green"),bty="n")
save.image("~/Documents/GitHub/waterlevels/WaterLevels.RData")
